// Code generated by cmd/gen-source-variants. DO NOT EDIT.

package dalec

import (
	"context"
	"fmt"

	"github.com/goccy/go-yaml/ast"
)

// validateSourceVariants ensures exactly one source variant is set
func (s *Source) validateSourceVariants() error {
	count := 0

	if s.Build != nil {
		count++
	}
	if s.Context != nil {
		count++
	}
	if s.DockerImage != nil {
		count++
	}
	if s.Git != nil {
		count++
	}
	if s.HTTP != nil {
		count++
	}
	if s.Inline != nil {
		count++
	}

	switch count {
	case 0:
		return fmt.Errorf("no non-nil source variant")
	case 1:
		return nil
	default:
		return fmt.Errorf("more than one source variant defined")
	}
}

// toInterface returns the underlying source interface implementation
func (s *Source) toInterface() source {
	switch {
	case s.Build != nil:
		return s.Build
	case s.Context != nil:
		return s.Context
	case s.DockerImage != nil:
		return s.DockerImage
	case s.Git != nil:
		return s.Git
	case s.HTTP != nil:
		return s.HTTP
	case s.Inline != nil:
		return s.Inline
	default:
		panic(errNoSourceVariant)
	}
}

func (s *SourceBuild) sourceMap() *sourceMap {
	return s._sourceMap
}

func (s *SourceBuild) UnmarshalYAML(ctx context.Context, node ast.Node) error {
	type internal SourceBuild
	var i internal

	dec := getDecoder(ctx)
	if err := dec.DecodeFromNodeContext(ctx, node, &i); err != nil {
		return err
	}

	*s = SourceBuild(i)
	s._sourceMap = newSourceMap(ctx, node)
	return nil
}

func (s *SourceContext) sourceMap() *sourceMap {
	return s._sourceMap
}

func (s *SourceContext) UnmarshalYAML(ctx context.Context, node ast.Node) error {
	type internal SourceContext
	var i internal

	dec := getDecoder(ctx)
	if err := dec.DecodeFromNodeContext(ctx, node, &i); err != nil {
		return err
	}

	*s = SourceContext(i)
	s._sourceMap = newSourceMap(ctx, node)
	return nil
}

func (s *SourceDockerImage) sourceMap() *sourceMap {
	return s._sourceMap
}

func (s *SourceDockerImage) UnmarshalYAML(ctx context.Context, node ast.Node) error {
	type internal SourceDockerImage
	var i internal

	dec := getDecoder(ctx)
	if err := dec.DecodeFromNodeContext(ctx, node, &i); err != nil {
		return err
	}

	*s = SourceDockerImage(i)
	s._sourceMap = newSourceMap(ctx, node)
	return nil
}

func (s *SourceGit) sourceMap() *sourceMap {
	return s._sourceMap
}

func (s *SourceGit) UnmarshalYAML(ctx context.Context, node ast.Node) error {
	type internal SourceGit
	var i internal

	dec := getDecoder(ctx)
	if err := dec.DecodeFromNodeContext(ctx, node, &i); err != nil {
		return err
	}

	*s = SourceGit(i)
	s._sourceMap = newSourceMap(ctx, node)
	return nil
}

func (s *SourceHTTP) sourceMap() *sourceMap {
	return s._sourceMap
}

func (s *SourceHTTP) UnmarshalYAML(ctx context.Context, node ast.Node) error {
	type internal SourceHTTP
	var i internal

	dec := getDecoder(ctx)
	if err := dec.DecodeFromNodeContext(ctx, node, &i); err != nil {
		return err
	}

	*s = SourceHTTP(i)
	s._sourceMap = newSourceMap(ctx, node)
	return nil
}

func (s *SourceInline) sourceMap() *sourceMap {
	return s._sourceMap
}

func (s *SourceInline) UnmarshalYAML(ctx context.Context, node ast.Node) error {
	type internal SourceInline
	var i internal

	dec := getDecoder(ctx)
	if err := dec.DecodeFromNodeContext(ctx, node, &i); err != nil {
		return err
	}

	*s = SourceInline(i)
	s._sourceMap = newSourceMap(ctx, node)
	return nil
}
