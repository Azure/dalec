{
	"$schema": "https://json-schema.org/draft/2020-12/schema",
	"$id": "https://github.com/Azure/dalec/spec",
	"$ref": "#/$defs/Spec",
	"$defs": {
		"ArtifactBuild": {
			"properties": {
				"steps": {
					"items": {
						"$ref": "#/$defs/BuildStep"
					},
					"type": "array",
					"description": "Steps is the list of commands to run to build the artifact(s).\nEach step is run sequentially and will be cached accordingly depending on the frontend implementation."
				},
				"env": {
					"additionalProperties": {
						"type": "string"
					},
					"type": "object",
					"description": "Env is the list of environment variables to set for all commands in this step group."
				}
			},
			"additionalProperties": false,
			"type": "object",
			"required": [
				"steps"
			],
			"description": "ArtifactBuild configures a group of steps that are run sequentially along with their outputs to build the artifact(s)."
		},
		"ArtifactConfig": {
			"properties": {
				"subpath": {
					"type": "string",
					"description": "Subpath is the subpath to use in the package for the artifact type.\n\nAs an example, binaries are typically placed in /usr/bin when installed.\nIf you want to nest them in a subdirectory, you can specify it here."
				},
				"name": {
					"type": "string",
					"description": "Name is file or dir name to use for the artifact in the package.\nIf empty, the file or dir name from the produced artifact will be used."
				}
			},
			"additionalProperties": false,
			"type": "object",
			"description": "ArtifactConfig is the configuration for a given artifact type."
		},
		"Artifacts": {
			"properties": {
				"binaries": {
					"additionalProperties": {
						"$ref": "#/$defs/ArtifactConfig"
					},
					"type": "object",
					"description": "Binaries is the list of binaries to include in the package."
				},
				"manpages": {
					"additionalProperties": {
						"$ref": "#/$defs/ArtifactConfig"
					},
					"type": "object",
					"description": "Manpages is the list of manpages to include in the package."
				}
			},
			"additionalProperties": false,
			"type": "object",
			"description": "Artifacts describes all the artifacts to include in the package."
		},
		"BuildStep": {
			"properties": {
				"command": {
					"type": "string",
					"description": "Command is the command to run to build the artifact(s).\nThis will always be wrapped as /bin/sh -c \"\u003ccommand\u003e\", or whatever the equivalent is for the target distro."
				},
				"env": {
					"additionalProperties": {
						"type": "string"
					},
					"type": "object",
					"description": "Env is the list of environment variables to set for the command."
				}
			},
			"additionalProperties": false,
			"type": "object",
			"required": [
				"command"
			],
			"description": "BuildStep is used to execute a command to build the artifact(s)."
		},
		"CacheDirConfig": {
			"properties": {
				"mode": {
					"type": "string",
					"enum": [
						"shared",
						"private",
						"locked"
					],
					"description": "Mode is the locking mode to set on the cache directory\nvalues: shared, private, locked\ndefault: shared"
				},
				"key": {
					"type": "string",
					"description": "Key is the cache key to use to cache the directory\ndefault: Value of `Path`"
				},
				"include_distro_key": {
					"type": "boolean",
					"description": "IncludeDistroKey is used to include the distro key as part of the cache key\nWhat this key is depends on the frontend implementation\nExample for Debian Buster may be \"buster\"\n\nAn example use for this is with a Go(lang) build cache when CGO is included.\nGo is unable to invalidate cgo and re-using the same cache across different distros may cause issues."
				},
				"include_arch_key": {
					"type": "boolean",
					"description": "IncludeArchKey is used to include the architecture key as part of the cache key\nWhat this key is depends on the frontend implementation\nFrontends SHOULD use the buildkit platform arch\n\nAs with [IncludeDistroKey], this is useful for Go(lang) builds with CGO."
				}
			},
			"additionalProperties": false,
			"type": "object",
			"description": "CacheDirConfig configures a persistent cache to be used across builds."
		},
		"ChangelogEntry": {
			"oneOf": [
				{
					"required": [
						"date"
					],
					"title": "date"
				}
			],
			"properties": {
				"date": {
					"type": "string",
					"format": "date-time",
					"description": "Date is the date of the changelog entry."
				},
				"author": {
					"type": "string",
					"description": "Author is the author of the changelog entry. e.g. `John Smith \u003cjohn.smith@example.com\u003e`"
				},
				"changes": {
					"items": {
						"type": "string"
					},
					"type": "array",
					"description": "Changes is the list of changes in the changelog entry."
				}
			},
			"additionalProperties": false,
			"type": "object",
			"required": [
				"date",
				"author",
				"changes"
			],
			"description": "ChangelogEntry is an entry in the changelog."
		},
		"CheckOutput": {
			"properties": {
				"equals": {
					"type": "string",
					"description": "Equals is the exact string to compare the output to."
				},
				"contains": {
					"items": {
						"type": "string"
					},
					"type": "array",
					"description": "Contains is the list of strings to check if they are contained in the output."
				},
				"matches": {
					"type": "string",
					"description": "Matches is the regular expression to match the output against."
				},
				"starts_with": {
					"type": "string",
					"description": "StartsWith is the string to check if the output starts with."
				},
				"ends_with": {
					"type": "string",
					"description": "EndsWith is the string to check if the output ends with."
				},
				"empty": {
					"type": "boolean",
					"description": "Empty is used to check if the output is empty."
				}
			},
			"additionalProperties": false,
			"type": "object",
			"description": "CheckOutput is used to specify the exepcted output of a check, such as stdout/stderr or a file."
		},
		"Command": {
			"properties": {
				"dir": {
					"type": "string",
					"description": "Dir is the working directory to run the command in."
				},
				"mounts": {
					"items": {
						"$ref": "#/$defs/SourceMount"
					},
					"type": "array",
					"description": "Mounts is the list of sources to mount into the build steps."
				},
				"cache_dirs": {
					"additionalProperties": {
						"$ref": "#/$defs/CacheDirConfig"
					},
					"type": "object",
					"description": "List of CacheDirs which will be used across all Steps"
				},
				"env": {
					"additionalProperties": {
						"type": "string"
					},
					"type": "object",
					"description": "Env is the list of environment variables to set for all commands in this step group."
				},
				"steps": {
					"items": {
						"$ref": "#/$defs/BuildStep"
					},
					"type": "array",
					"description": "Steps is the list of commands to run to generate the source.\nSteps are run sequentially and results of each step should be cached."
				}
			},
			"additionalProperties": false,
			"type": "object",
			"required": [
				"steps"
			],
			"description": "Command is used to execute a command to generate a source from a docker image."
		},
		"FileCheckOutput": {
			"properties": {
				"equals": {
					"type": "string",
					"description": "Equals is the exact string to compare the output to."
				},
				"contains": {
					"items": {
						"type": "string"
					},
					"type": "array",
					"description": "Contains is the list of strings to check if they are contained in the output."
				},
				"matches": {
					"type": "string",
					"description": "Matches is the regular expression to match the output against."
				},
				"starts_with": {
					"type": "string",
					"description": "StartsWith is the string to check if the output starts with."
				},
				"ends_with": {
					"type": "string",
					"description": "EndsWith is the string to check if the output ends with."
				},
				"empty": {
					"type": "boolean",
					"description": "Empty is used to check if the output is empty."
				},
				"permissions": {
					"type": "integer",
					"description": "Permissions is the expected permissions of the file."
				},
				"is_dir": {
					"type": "boolean",
					"description": "IsDir is used to set the expected file mode to a directory."
				},
				"not_exist": {
					"type": "boolean",
					"description": "NotExist is used to check that the file does not exist."
				}
			},
			"additionalProperties": false,
			"type": "object",
			"description": "FileCheckOutput is used to specify the expected output of a file."
		},
		"Frontend": {
			"properties": {
				"image": {
					"type": "string",
					"description": "Image specifies the frontend image to forward the build to.\nThis can be left unspecified *if* the original frontend has builtin support for the distro.\n\nIf the original frontend does not have builtin support for the distro, this must be specified or the build will fail.\nIf this is specified then it MUST be used.",
					"examples": [
						"docker.io/my/frontend:latest"
					]
				},
				"cmdline": {
					"type": "string",
					"description": "CmdLine is the command line to use to forward the build to the frontend.\nBy default the frontend image's entrypoint/cmd is used."
				}
			},
			"additionalProperties": false,
			"type": "object",
			"required": [
				"image"
			],
			"description": "Frontend encapsulates the configuration for a frontend to forward a build target to."
		},
		"ImageConfig": {
			"properties": {
				"entrypoint": {
					"type": "string",
					"description": "Entrypoint sets the image's \"entrypoint\" field.\nThis is used to control the default command to run when the image is run."
				},
				"cmd": {
					"type": "string",
					"description": "Cmd sets the image's \"cmd\" field.\nWhen entrypoint is set, this is used as the default arguments to the entrypoint.\nWhen entrypoint is not set, this is used as the default command to run."
				},
				"env": {
					"items": {
						"type": "string"
					},
					"type": "array",
					"description": "Env is the list of environment variables to set in the image."
				},
				"labels": {
					"additionalProperties": {
						"type": "string"
					},
					"type": "object",
					"description": "Labels is the list of labels to set in the image metadata."
				},
				"volumes": {
					"additionalProperties": {
						"properties": {},
						"additionalProperties": false,
						"type": "object"
					},
					"type": "object",
					"description": "Volumes is the list of volumes for the image.\nVolumes instruct the runtime to bypass the any copy-on-write filesystems and mount the volume directly to the container."
				},
				"working_dir": {
					"type": "string",
					"description": "WorkingDir is the working directory to set in the image.\nThis sets the directory the container will start in."
				},
				"stop_signal": {
					"type": "string",
					"description": "StopSignal is the signal to send to the container to stop it.\nThis is used to stop the container gracefully.",
					"examples": [
						"SIGTERM"
					]
				},
				"base": {
					"type": "string",
					"description": "Base is the base image to use for the output image.\nThis only affects the output image, not the intermediate build image."
				}
			},
			"additionalProperties": false,
			"type": "object",
			"description": "ImageConfig is the configuration for the output image."
		},
		"PackageDependencies": {
			"properties": {
				"build": {
					"additionalProperties": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"type": "object",
					"description": "Build is the list of packagese required to build the package."
				},
				"runtime": {
					"additionalProperties": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"type": "object",
					"description": "Runtime is the list of packages required to install/run the package."
				},
				"recommends": {
					"additionalProperties": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"type": "object",
					"description": "Recommends is the list of packages recommended to install with the generated package.\nNote: Not all package managers support this (e.g. rpm)"
				},
				"test": {
					"items": {
						"type": "string"
					},
					"type": "array",
					"description": "Test lists any extra packages required for running tests"
				}
			},
			"additionalProperties": false,
			"type": "object",
			"description": "PackageDependencies is a list of dependencies for a package."
		},
		"PatchSpec": {
			"properties": {
				"source": {
					"type": "string",
					"description": "Source is the name of the source that contains the patch to apply."
				},
				"strip": {
					"type": "integer",
					"description": "Strip is the number of leading path components to strip from the patch.\nThe default is 1 which is typical of a git diff."
				}
			},
			"additionalProperties": false,
			"type": "object",
			"required": [
				"source"
			],
			"description": "PatchSpec is used to apply a patch to a source with a given set of options."
		},
		"Source": {
			"properties": {
				"image": {
					"$ref": "#/$defs/SourceDockerImage",
					"description": "This is an embedded union representing all of the possible source types.\nOnly one should be non-nil at any given time. It is considered an error\ncondition if more than one is non-nil, or if all are nil.\n\n=== Begin Source Variants ==="
				},
				"git": {
					"$ref": "#/$defs/SourceGit"
				},
				"https": {
					"$ref": "#/$defs/SourceHTTPS"
				},
				"context": {
					"$ref": "#/$defs/SourceContext"
				},
				"build": {
					"$ref": "#/$defs/SourceBuild"
				},
				"local": {
					"$ref": "#/$defs/SourceLocal"
				},
				"path": {
					"type": "string",
					"description": "Path is the path to the source after fetching it based on the identifier."
				},
				"includes": {
					"items": {
						"type": "string"
					},
					"type": "array",
					"description": "Includes is a list of paths underneath `Path` to include, everything else is execluded\nIf empty, everything is included (minus the excludes)"
				},
				"excludes": {
					"items": {
						"type": "string"
					},
					"type": "array",
					"description": "Excludes is a list of paths underneath `Path` to exclude, everything else is included"
				}
			},
			"additionalProperties": false,
			"type": "object",
			"description": "Source defines a source to be used in the build."
		},
		"SourceBuild": {
			"properties": {
				"name": {
					"type": "string"
				},
				"target": {
					"type": "string",
					"description": "Target specifies the build target to use.\nIf unset, the default target is determined by the frontend implementation (e.g. the dockerfile frontend uses the last build stage as the default)."
				},
				"args": {
					"additionalProperties": {
						"type": "string"
					},
					"type": "object",
					"description": "Args are the build args to pass to the build."
				},
				"file": {
					"type": "string",
					"description": "File is the path to the build file in the build context\nIf not set the default is assumed by buildkit to be `Dockerfile` at the root of the context.\nThis is exclusive with [Inline]"
				},
				"inline": {
					"type": "string",
					"description": "Inline is an inline build spec to use.\nThis can be used to specify a dockerfile instead of using one in the build context\nThis is exclusive with [File]",
					"examples": [
						"FROM busybox\nRUN echo hello world"
					]
				}
			},
			"additionalProperties": false,
			"type": "object",
			"required": [
				"name"
			],
			"description": "i.e."
		},
		"SourceContext": {
			"properties": {
				"name": {
					"type": "string"
				}
			},
			"additionalProperties": false,
			"type": "object",
			"required": [
				"name"
			]
		},
		"SourceDockerImage": {
			"properties": {
				"ref": {
					"type": "string"
				},
				"cmd": {
					"$ref": "#/$defs/Command"
				}
			},
			"additionalProperties": false,
			"type": "object",
			"required": [
				"ref"
			]
		},
		"SourceGit": {
			"properties": {
				"url": {
					"type": "string"
				},
				"commit": {
					"type": "string"
				},
				"keepGitDir": {
					"type": "boolean"
				}
			},
			"additionalProperties": false,
			"type": "object",
			"required": [
				"url",
				"commit",
				"keepGitDir"
			]
		},
		"SourceHTTPS": {
			"properties": {
				"url": {
					"type": "string"
				}
			},
			"additionalProperties": false,
			"type": "object",
			"required": [
				"url"
			],
			"description": "No longer supports `.git` URLs as git repos."
		},
		"SourceLocal": {
			"properties": {
				"path": {
					"type": "string"
				}
			},
			"additionalProperties": false,
			"type": "object"
		},
		"SourceMount": {
			"properties": {
				"dest": {
					"type": "string",
					"description": "Dest is the destination directory to mount to"
				},
				"spec": {
					"$ref": "#/$defs/Source",
					"description": "Spec specifies the source to mount"
				}
			},
			"additionalProperties": false,
			"type": "object",
			"required": [
				"dest",
				"spec"
			],
			"description": "SourceMount is used to take a [Source] and mount it into a build step."
		},
		"Spec": {
			"properties": {
				"name": {
					"type": "string",
					"description": "Name is the name of the package."
				},
				"description": {
					"type": "string",
					"description": "Description is a short description of the package."
				},
				"website": {
					"type": "string",
					"description": "Website is the URL to store in the metadata of the package."
				},
				"version": {
					"type": "string",
					"description": "Version setst he version of the package."
				},
				"revision": {
					"oneOf": [
						{
							"type": "string"
						},
						{
							"type": "integer"
						}
					],
					"description": "Revision sets the package revision.\nThis will generally get merged into the package version when generating the package."
				},
				"noarch": {
					"type": "boolean",
					"description": "Marks the package as architecture independent.\nIt is up to the package author to ensure that the package is actually architecture independent.\nThis is metadata only."
				},
				"conflicts": {
					"additionalProperties": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"type": "object",
					"description": "Conflicts is the list of packages that conflict with the generated package.\nThis will prevent the package from being installed if any of these packages are already installed or vice versa."
				},
				"replaces": {
					"additionalProperties": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"type": "object",
					"description": "Replaces is the list of packages that are replaced by the generated package."
				},
				"provides": {
					"items": {
						"type": "string"
					},
					"type": "array",
					"description": "Provides is the list of things that the generated package provides.\nThis can be used to satisfy dependencies of other packages.\nAs an example, the moby-runc package provides \"runc\", other packages could depend on \"runc\" and be satisfied by moby-runc.\nThis is an advanced use case and consideration should be taken to ensure that the package actually provides the thing it claims to provide."
				},
				"sources": {
					"additionalProperties": {
						"$ref": "#/$defs/Source"
					},
					"type": "object",
					"description": "Sources is the list of sources to use to build the artifact(s).\nThe map key is the name of the source and the value is the source configuration.\nThe source configuration is used to fetch the source and filter the files to include/exclude.\nThis can be mounted into the build using the \"Mounts\" field in the StepGroup.\n\nSources can be embedded in the main spec as here or overriden in a build request."
				},
				"patches": {
					"additionalProperties": {
						"items": {
							"$ref": "#/$defs/PatchSpec"
						},
						"type": "array"
					},
					"type": "object",
					"description": "Patches is the list of patches to apply to the sources.\nThe map key is the name of the source to apply the patches to.\nThe value is the list of patches to apply to the source.\nThe patch must be present in the `Sources` map.\nEach patch is applied in order and the result is used as the source for the build."
				},
				"build": {
					"$ref": "#/$defs/ArtifactBuild",
					"description": "Build is the configuration for building the artifacts in the package."
				},
				"args": {
					"additionalProperties": {
						"type": "string"
					},
					"type": "object",
					"description": "Args is the list of arguments that can be used for shell-style expansion in (certain fields of) the spec.\nAny arg supplied in the build request which does not appear in this list will cause an error.\nAttempts to use an arg in the spec which is not specified here will assume to be a literal string.\nThe map value is the default value to use if the arg is not supplied in the build request."
				},
				"license": {
					"type": "string",
					"description": "License is the license of the package."
				},
				"vendor": {
					"type": "string",
					"description": "Vendor is the vendor of the package."
				},
				"packager": {
					"type": "string",
					"description": "Packager is the name of the person,team,company that packaged the package."
				},
				"artifacts": {
					"$ref": "#/$defs/Artifacts",
					"description": "Artifacts is the list of artifacts to include in the package."
				},
				"targets": {
					"additionalProperties": {
						"$ref": "#/$defs/Target"
					},
					"type": "object",
					"description": "The list of distro targets to build the package for."
				},
				"dependencies": {
					"$ref": "#/$defs/PackageDependencies",
					"description": "Dependencies are the different dependencies that need to be specified in the package.\nDependencies are overwritten if specified in the target map for the requested distro."
				},
				"image": {
					"$ref": "#/$defs/ImageConfig",
					"description": "Image is the image configuration when the target output is a container image.\nThis is overwritten if specified in the target map for the requested distro."
				},
				"changelog": {
					"items": {
						"$ref": "#/$defs/ChangelogEntry"
					},
					"type": "array",
					"description": "Changelog is the list of changes to the package."
				},
				"tests": {
					"items": {
						"$ref": "#/$defs/TestSpec"
					},
					"type": "array",
					"description": "Tests are the list of tests to run for the package that should work regardless of target OS\nEach item in this list is run with a separate rootfs and cannot interact with other tests.\nEach [TestSpec] is run with a separate rootfs, asyncronously from other [TestSpec]."
				}
			},
			"additionalProperties": false,
			"type": "object",
			"required": [
				"name",
				"description",
				"website",
				"version",
				"revision",
				"license",
				"vendor",
				"packager"
			],
			"description": "Spec is the specification for a package build."
		},
		"Target": {
			"properties": {
				"dependencies": {
					"$ref": "#/$defs/PackageDependencies",
					"description": "Dependencies are the different dependencies that need to be specified in the package."
				},
				"image": {
					"$ref": "#/$defs/ImageConfig",
					"description": "Image is the image configuration when the target output is a container image."
				},
				"frontend": {
					"$ref": "#/$defs/Frontend",
					"description": "Frontend is the frontend configuration to use for the target.\nThis is used to forward the build to a different, dalec-compatabile frontend.\nThis can be useful when testing out new distros or using a different version of the frontend for a given distro."
				},
				"tests": {
					"items": {
						"$ref": "#/$defs/TestSpec"
					},
					"type": "array",
					"description": "Tests are the list of tests to run which are specific to the target.\nTests are appended to the list of tests in the main [Spec]"
				}
			},
			"additionalProperties": false,
			"type": "object",
			"description": "Target defines a distro-specific build target."
		},
		"TestSpec": {
			"properties": {
				"name": {
					"type": "string",
					"description": "Name is the name of the test\nThis will be used to output the test results"
				},
				"dir": {
					"type": "string",
					"description": "Dir is the working directory to run the command in."
				},
				"mounts": {
					"items": {
						"$ref": "#/$defs/SourceMount"
					},
					"type": "array",
					"description": "Mounts is the list of sources to mount into the build steps."
				},
				"cache_dirs": {
					"additionalProperties": {
						"$ref": "#/$defs/CacheDirConfig"
					},
					"type": "object",
					"description": "List of CacheDirs which will be used across all Steps"
				},
				"env": {
					"additionalProperties": {
						"type": "string"
					},
					"type": "object",
					"description": "Env is the list of environment variables to set for all commands in this step group."
				},
				"steps": {
					"items": {
						"$ref": "#/$defs/TestStep"
					},
					"type": "array",
					"description": "Steps is the list of commands to run to test the package."
				},
				"files": {
					"additionalProperties": {
						"$ref": "#/$defs/FileCheckOutput"
					},
					"type": "object",
					"description": "Files is the list of files to check after running the steps."
				}
			},
			"additionalProperties": false,
			"type": "object",
			"required": [
				"name",
				"steps"
			],
			"description": "TestSpec is used to execute tests against a container with the package installed in it."
		},
		"TestStep": {
			"properties": {
				"command": {
					"type": "string",
					"description": "Command is the command to run to build the artifact(s).\nThis will always be wrapped as /bin/sh -c \"\u003ccommand\u003e\", or whatever the equivalent is for the target distro."
				},
				"env": {
					"additionalProperties": {
						"type": "string"
					},
					"type": "object",
					"description": "Env is the list of environment variables to set for the command."
				},
				"stdout": {
					"$ref": "#/$defs/CheckOutput",
					"description": "Stdout is the expected output on stdout"
				},
				"stderr": {
					"$ref": "#/$defs/CheckOutput",
					"description": "Stderr is the expected output on stderr"
				},
				"stdin": {
					"type": "string",
					"description": "Stdin is the input to pass to stdin for the command"
				}
			},
			"additionalProperties": false,
			"type": "object",
			"required": [
				"command"
			],
			"description": "TestStep is a wrapper for [BuildStep] to include checks on stdio streams"
		}
	}
}