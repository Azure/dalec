"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[105],{1018:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"artifacts","title":"Artifacts","description":"Artifacts are used to configure what actually gets installed with a package.","source":"@site/docs/artifacts.md","sourceDirName":".","slug":"/artifacts","permalink":"/dalec/artifacts","draft":false,"unlisted":false,"editUrl":"https://github.com/Azure/dalec/blob/main/website/docs/artifacts.md","tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"Testing","permalink":"/dalec/testing"},"next":{"title":"Extra Repository Configs","permalink":"/dalec/repositories"}}');var t=n(4848),s=n(8453);const r={},l="Artifacts",c={},o=[{value:"Artifact Configuration",id:"artifact-configuration",level:2},{value:"Binaries",id:"binaries",level:3},{value:"Libexec",id:"libexec",level:3},{value:"Manpages",id:"manpages",level:3},{value:"Data Dirs",id:"data-dirs",level:3},{value:"Directories",id:"directories",level:3},{value:"Config Files",id:"config-files",level:3},{value:"Docs",id:"docs",level:3},{value:"Licenses",id:"licenses",level:3},{value:"Systemd",id:"systemd",level:3},{value:"Libs",id:"libs",level:3},{value:"Links",id:"links",level:3},{value:"Headers",id:"headers",level:3},{value:"Users",id:"users",level:3},{value:"Groups",id:"groups",level:3},{value:"Automatic Stripping",id:"automatic-stripping",level:2},{value:"Automatic Dependency Resolution",id:"automatic-dependency-resolution",level:2}];function d(e){const i={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"artifacts",children:"Artifacts"})}),"\n",(0,t.jsx)(i.p,{children:"Artifacts are used to configure what actually gets installed with a package.\nAnything that needs to be installed needs an entry in the artifacts section."}),"\n",(0,t.jsx)(i.p,{children:"There are different types of artifacts which are installed to different locations\non the target system.\nWhat location this is depends on the target OS/distro and the kind of artifact."}),"\n",(0,t.jsx)(i.h2,{id:"artifact-configuration",children:"Artifact Configuration"}),"\n",(0,t.jsx)(i.p,{children:"Most artifact types share a common data type so can be configured similarly.\nIt is shown here as a reference which is linked to in the artifact descriptions\nwhere it is pertinent."}),"\n",(0,t.jsx)(i.p,{children:"Configuration options shared by most artifacts:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.em,{children:"subpath"}),"(string): The provided path is joined to the typical install path,\ne.g. ",(0,t.jsx)(i.code,{children:"/usr/bin/<subpath>"}),", where the artifact will be\ninstalled to."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.em,{children:"permissions"}),"(octal): file permissions to apply to the artifact."]}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"binaries",children:"Binaries"}),"\n",(0,t.jsxs)(i.p,{children:["Binaries are binary files that may be executed.\nOn Linux these would typically get installed into ",(0,t.jsx)(i.code,{children:"/usr/bin"}),"."]}),"\n",(0,t.jsxs)(i.p,{children:["Binaries are a mapping of file path to ",(0,t.jsx)(i.a,{href:"#artifact-configuration",children:"artifact configuration"}),".\nThe file path is the path to a file that must be available after the build\nsection has finished. This path is relative to the working directory of the\nbuild phase ",(0,t.jsx)(i.em,{children:"before"})," any directory changes are made."]}),"\n",(0,t.jsx)(i.p,{children:"Example:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-yaml",children:'artifacts:\n  binaries:\n    src/my_bin:\n      subpath: ""\n      permissions: 0o755\n'})}),"\n",(0,t.jsx)(i.p,{children:"You may use a trailing wildcard to specify multiple binaries in a directory,\nthough behavior may differ between different OS's/distros."}),"\n",(0,t.jsx)(i.h3,{id:"libexec",children:"Libexec"}),"\n",(0,t.jsxs)(i.p,{children:["Libexec files are additional executable files that may be executed by one of\nthe main package executables. On Linux these would typically get installed into\n",(0,t.jsx)(i.code,{children:"/usr/libexec/"})," or ",(0,t.jsx)(i.code,{children:"/usr/libexec/<main-executable-name>"}),"."]}),"\n",(0,t.jsxs)(i.p,{children:["Files under libexec are a mapping of file path to ",(0,t.jsx)(i.a,{href:"#artifact-configuration",children:"artifact configuration"}),".\nIf ",(0,t.jsx)(i.code,{children:"subpath"})," is not supplied, the artifact will be installed in ",(0,t.jsx)(i.code,{children:"/usr/libexec"}),"\ndirectly. The file path is the path to a file that must be available after the\nbuild section has finished. This path is relative to the working directory of\nthe build phase ",(0,t.jsx)(i.em,{children:"before"})," any directory changes are made."]}),"\n",(0,t.jsx)(i.p,{children:"Example:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-yaml",children:"name: my_package\n\nartifacts:\n  # the following config will install my_bin at /usr/libexec/my package/my_bin\n  libexec:\n    src/my_bin:\n"})}),"\n",(0,t.jsx)(i.p,{children:"You may use a trailing wildcard to specify multiple binaries in a directory,\nthough behavior may differ between different OS's/distros."}),"\n",(0,t.jsx)(i.h3,{id:"manpages",children:"Manpages"}),"\n",(0,t.jsxs)(i.p,{children:["Manpages is short for manual pages.\nOn Linux these are typically installed to ",(0,t.jsx)(i.code,{children:"/usr/share/man"})]}),"\n",(0,t.jsxs)(i.p,{children:["Manpages are a mapping of file path to ",(0,t.jsx)(i.a,{href:"#artifact-configuration",children:"artifact configuration"}),".\nThe file path is the path to a file that must be available after the build\nsection has finished. This path is relative to the working directory of the\nbuild phase ",(0,t.jsx)(i.em,{children:"before"})," any directory changes are made."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-yaml",children:'artifacts:\n  manpages:\n    src/man/*:\n      subpath: ""\n      permissions: 0o644\n'})}),"\n",(0,t.jsx)(i.p,{children:"You may use a trailing wildcard to specify multiple binaries in a directory,\nthough behavior may differ between different OS's/distros."}),"\n",(0,t.jsx)(i.h3,{id:"data-dirs",children:"Data Dirs"}),"\n",(0,t.jsxs)(i.p,{children:["Data dirs are a list of read-only, architecture-independent data files.\nOn Linux these typically get placed into ",(0,t.jsx)(i.code,{children:"/usr/share"}),"."]}),"\n",(0,t.jsxs)(i.p,{children:["Data dirs are a mapping of file path to ",(0,t.jsx)(i.a,{href:"#artifact-configuration",children:"artifact configuration"}),".\nThe file path is the path to a file that must be available after the build\nsection has finished. This path is relative to the working directory of the\nbuild phase ",(0,t.jsx)(i.em,{children:"before"})," any directory changes are made."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-yaml",children:'artifacts:\n  data_dirs:\n    build_output/my_bin:\n      subpath: ""\n      permissions: 0o755\n'})}),"\n",(0,t.jsx)(i.h3,{id:"directories",children:"Directories"}),"\n",(0,t.jsx)(i.p,{children:"Directories allows you to create new directories when installing the package.\nTwo types of directory artifacts are supported:"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.em,{children:"config"}),": This is a directory where configuration files typically go, e.g. /etc/my_package2. ",(0,t.jsx)(i.em,{children:"State"}),": This is directory for persistent state, typically in ",(0,t.jsx)(i.code,{children:"/var/lib"})," on Linux."]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Unlike many other artifact types, this does not reference any file produced\nby build. Instead these are created as empty directories."}),"\n",(0,t.jsx)(i.p,{children:"Example:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-yaml",children:"artifacts:\n  createDirectories:\n    state:\n      mystate:\n        mode: 0o755\n    config:\n      myconfig:\n        mode: 0o755\n"})}),"\n",(0,t.jsx)(i.h3,{id:"config-files",children:"Config Files"}),"\n",(0,t.jsxs)(i.p,{children:["Config files are, depending on the package manager, specially marked as configuration.\nTypically these go under ",(0,t.jsx)(i.code,{children:"/etc"})," on Linux."]}),"\n",(0,t.jsxs)(i.p,{children:["Config files are a mapping of file path to ",(0,t.jsx)(i.a,{href:"#artifact-configuration",children:"artifact configuration"}),".\nThe file path is the path to a file that must be available after the build\nsection has finished. This path is relative to the working directory of the\nbuild phase ",(0,t.jsx)(i.em,{children:"before"})," any directory changes are made."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-yaml",children:'artifacts:\n  configFiles:\n    src/my_config.json:\n      subpath: ""\n      permissions: 0o644\n'})}),"\n",(0,t.jsx)(i.h3,{id:"docs",children:"Docs"}),"\n",(0,t.jsxs)(i.p,{children:["Docs are general documentation, not manpages, for your package.\nOn Linux these typically go under ",(0,t.jsx)(i.code,{children:"/usr/share/doc/<package name>"})]}),"\n",(0,t.jsxs)(i.p,{children:["Docs are a mapping of file path to ",(0,t.jsx)(i.a,{href:"#artifact-configuration",children:"artifact configuration"}),".\nThe file path is the path to a file that must be available after the build\nsection has finished. This path is relative to the working directory of the\nbuild phase ",(0,t.jsx)(i.em,{children:"before"})," any directory changes are made."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-yaml",children:'artifacts:\n  docs:\n    src/doc/info.md:\n      subpath: ""\n      permissions: 0o644\n'})}),"\n",(0,t.jsx)(i.p,{children:"You may use a trailing wildcard to specify multiple binaries in a directory,\nthough behavior may differ between different OS's/distros."}),"\n",(0,t.jsx)(i.h3,{id:"licenses",children:"Licenses"}),"\n",(0,t.jsx)(i.p,{children:"Licenses are license files to be installed with the package."}),"\n",(0,t.jsxs)(i.p,{children:["Licenses are a mapping of file path to ",(0,t.jsx)(i.a,{href:"#artifact-configuration",children:"artifact configuration"}),".\nThe file path is the path to a file that must be available after the build\nsection has finished. This path is relative to the working directory of the\nbuild phase ",(0,t.jsx)(i.em,{children:"before"})," any directory changes are made."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-yaml",children:'artifacts:\n  licenses:\n    src/LICENSE.md:\n      subpath: ""\n      permissions: 0o644\n'})}),"\n",(0,t.jsx)(i.h3,{id:"systemd",children:"Systemd"}),"\n",(0,t.jsx)(i.p,{children:"Systemd artifacts are used for installing systemd unit configurations.\nTwo different types of systemd configurations are currently supported:"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsx)(i.li,{children:"Unit files - including services, sockets, mounts, or any other systemd unit type."}),"\n",(0,t.jsx)(i.li,{children:"Drop-ins - Adds customization to an existing systemd unit"}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"See the systemd documentation for more details on these types."}),"\n",(0,t.jsx)(i.p,{children:"Example:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-yaml",children:'artifacts:\n  systemd:\n    units:\n      src/contrib/init/my_service.service:\n        enable: false\n        name: ""\n    dropins:\n      src/contrib/init/customize-a-thing.service:\n        enable: false\n        name: ""\n'})}),"\n",(0,t.jsx)(i.h3,{id:"libs",children:"Libs"}),"\n",(0,t.jsxs)(i.p,{children:["Libs are library files to be included with your package.\nOn Linux these typically go under ",(0,t.jsx)(i.code,{children:"/usr/lib/<package>"}),"."]}),"\n",(0,t.jsxs)(i.p,{children:["Libs are a mapping of file path to ",(0,t.jsx)(i.a,{href:"#artifact-configuration",children:"artifact configuration"}),".\nThe file path is the path to a file that must be available after the build\nsection has finished. This path is relative to the working directory of the\nbuild phase ",(0,t.jsx)(i.em,{children:"before"})," any directory changes are made."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-yaml",children:'artifacts:\n  libs:\n    my_output_dir/lib.o:\n        subpath: ""\n        permissions: 0o644\n'})}),"\n",(0,t.jsx)(i.p,{children:"You may use a trailing wildcard to specify multiple binaries in a directory,\nthough behavior may differ between different OS's/distros."}),"\n",(0,t.jsx)(i.h3,{id:"links",children:"Links"}),"\n",(0,t.jsx)(i.p,{children:"Links are a list of symlinks to be included with the package.\nUnlike most other artifact typtes, links do not reference any specific build\nartifact but rather a literal source-to-target mapping for the symlink.\nSymlink ownership can also be set (user and group). Note that this sets\nownership of the symlink itself, not the target file."}),"\n",(0,t.jsxs)(i.p,{children:["User and group SHOULD be specified as names and not as UID/GID numbers.\nThe user/group must exist on the target system OR be created as part of the\npackage installation via the ",(0,t.jsx)(i.a,{href:"#Users",children:"users"})," and/or ",(0,t.jsx)(i.a,{href:"#Groups",children:"groups"})," section(s)."]}),"\n",(0,t.jsx)(i.p,{children:"Example:"}),"\n",(0,t.jsx)(i.p,{children:"This creates a symlink at /usr/bin/go pointing to /usr/lib/golang/go with the user and group."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-yaml",children:"artifacts:\n  links:\n    - source: /usr/lib/golang/go\n      dest: /usr/bin/go\n      user: someuser\n      group: somegroup\n"})}),"\n",(0,t.jsx)(i.h3,{id:"headers",children:"Headers"}),"\n",(0,t.jsxs)(i.p,{children:["Headers are header to be included with the package. On Linux these typically go\nunder ",(0,t.jsx)(i.code,{children:"/usr/include/"}),"."]}),"\n",(0,t.jsxs)(i.p,{children:["Headers are a mapping of file path to ",(0,t.jsx)(i.a,{href:"#artifact-configuration",children:"artifact configuration"}),".\nThe file path is the path to a file or directory that must be available after\nthe build section has finished. This path is relative to the working directory\nof the build phase ",(0,t.jsx)(i.em,{children:"before"})," any directory changes are made."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-yaml",children:"artifacts:\n  headers:\n    src/my_header.h:\n"})}),"\n",(0,t.jsx)(i.p,{children:"or for a directory:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-yaml",children:"artifacts:\n  headers:\n    src/my_headers/:\n"})}),"\n",(0,t.jsxs)(i.p,{children:["Note that headers are not installed within a subdirectory of ",(0,t.jsx)(i.code,{children:"/usr/include/"}),"\nwith the name of the package. They are installed directly into ",(0,t.jsx)(i.code,{children:"/usr/include/"}),".\nFor instance, for the above examples, the headers would be installed to\n",(0,t.jsx)(i.code,{children:"/usr/include/my_header.h"})," and ",(0,t.jsx)(i.code,{children:"/usr/include/my_headers/"})," respectively."]}),"\n",(0,t.jsx)(i.h3,{id:"users",children:"Users"}),"\n",(0,t.jsx)(i.p,{children:"Users allow you to specify a list of users to be created when installing the\npackage.\nIn most cases this will require a shell to be available on the target system."}),"\n",(0,t.jsx)(i.p,{children:"Example:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-yaml",children:"artifacts:\n  users:\n    - name: myuser\n"})}),"\n",(0,t.jsx)(i.h3,{id:"groups",children:"Groups"}),"\n",(0,t.jsx)(i.p,{children:"Groups allow you to specify a list of groups to be created when installing the\npackage.\nIn most cases this will require a shell to be available on the target system."}),"\n",(0,t.jsx)(i.p,{children:"Example:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-yaml",children:"artifacts:\n  groups:\n    - name: mygroup\n"})}),"\n",(0,t.jsx)(i.h2,{id:"automatic-stripping",children:"Automatic Stripping"}),"\n",(0,t.jsxs)(i.p,{children:["Some builds may not work with binary stripping, in which case you can disable\nautomatic stripping by setting ",(0,t.jsx)(i.code,{children:"disable_strip: true"}),"\nThis is a global setting that applies to all artifacts only."]}),"\n",(0,t.jsx)(i.p,{children:"If you want some binaries stripped and others not, you will need to manually\nstrip them in the build phase."}),"\n",(0,t.jsx)(i.h2,{id:"automatic-dependency-resolution",children:"Automatic Dependency Resolution"}),"\n",(0,t.jsxs)(i.p,{children:["Some package tooling, such as ",(0,t.jsx)(i.code,{children:"rpmbuild"})," or ",(0,t.jsx)(i.code,{children:"debbuild"})," both used in core DALEC,\nwill attempt to automatically resolve runtime dependencies for you based on\nthe artifacts you have specified.\nThis can include detecting binaries with linked libraries or even that\na shell script is included in the artifacts."]}),"\n",(0,t.jsxs)(i.p,{children:["You can disable this behavior by setting ",(0,t.jsx)(i.code,{children:"disable_auto_requires: true"})]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"artifacts:\n  disable_auto_requires: true\n"})}),"\n",(0,t.jsx)(i.p,{children:"You must be careful when using this as it will now be up to you to ensure\nthat all runtime dependencies are specified in the spec rather than\nrelying on the tooling to do it for you."}),"\n",(0,t.jsxs)(i.p,{children:["How this works under the hood is dependent on the build tooling.\nFor rpmbuild setting this to true will set ",(0,t.jsx)(i.code,{children:"AutoReq: no"})," in the resulting rpm\nspec file.\nFor debbuild, DALEC will not include ",(0,t.jsx)(i.code,{children:"${shlibs:Depends}"})," in the control file,\nwhich DALEC normally includes by default."]})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>l});var a=n(6540);const t={},s=a.createContext(t);function r(e){const i=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(s.Provider,{value:i},e.children)}}}]);