"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[327],{6841:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>c,frontMatter:()=>o,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"examples/targets","title":"targets","description":"TARGET                           DESCRIPTION","source":"@site/docs/examples/targets.md","sourceDirName":"examples","slug":"/examples/targets","permalink":"/dalec/examples/targets","draft":false,"unlisted":false,"editUrl":"https://github.com/project-dalec/dalec/blob/main/website/docs/examples/targets.md","tags":[],"version":"current","frontMatter":{}}');var r=i(4848),s=i(8453);const o={},t=void 0,l={},u=[];function d(e){const n={p:"p",...(0,s.R)(),...e.components};return(0,r.jsx)(n.p,{children:"TARGET                           DESCRIPTION\nalmalinux8/container (default)   Builds a container image for\nalmalinux8/container/depsonly    Builds a container image with only the runtime dependencies installed.\nalmalinux8/rpm                   Builds an rpm and src.rpm.\nalmalinux8/rpm/debug             Debug options for rpm builds.\nalmalinux8/worker                Builds the base worker image responsible for building the rpm\nalmalinux9/container (default)   Builds a container image for\nalmalinux9/container/depsonly    Builds a container image with only the runtime dependencies installed.\nalmalinux9/rpm                   Builds an rpm and src.rpm.\nalmalinux9/rpm/debug             Debug options for rpm builds.\nalmalinux9/worker                Builds the base worker image responsible for building the rpm\nazlinux3/container (default)     Builds a container image for\nazlinux3/container/depsonly      Builds a container image with only the runtime dependencies installed.\nazlinux3/rpm                     Builds an rpm and src.rpm.\nazlinux3/rpm/debug               Debug options for rpm builds.\nazlinux3/testing/sysext          Builds a systemd system extension image.\nazlinux3/worker                  Builds the base worker image responsible for building the rpm\nbionic/deb (default)             Builds a deb package.\nbionic/dsc                       Builds a Debian source package.\nbionic/testing/container         Builds a container image for testing purposes only.\nbionic/worker                    Builds the worker image.\nbookworm/deb (default)           Builds a deb package.\nbookworm/dsc                     Builds a Debian source package.\nbookworm/testing/container       Builds a container image for testing purposes only.\nbookworm/worker                  Builds the worker image.\nbullseye/deb (default)           Builds a deb package.\nbullseye/dsc                     Builds a Debian source package.\nbullseye/testing/container       Builds a container image for testing purposes only.\nbullseye/worker                  Builds the worker image.\ndebug/cargohome                  Outputs all the Cargo dependencies for the spec\ndebug/gomods                     Outputs all the gomodule dependencies for the spec\ndebug/patched-sources            Outputs all patched sources from a dalec spec file.\ndebug/pip                        Outputs all the pip dependencies for the spec\ndebug/resolve                    Outputs the resolved dalec spec file with build args applied.\ndebug/sources                    Outputs all sources from a dalec spec file.\nfocal/deb (default)              Builds a deb package.\nfocal/dsc                        Builds a Debian source package.\nfocal/testing/container          Builds a container image for testing purposes only.\nfocal/worker                     Builds the worker image.\njammy/deb (default)              Builds a deb package.\njammy/dsc                        Builds a Debian source package.\njammy/testing/container          Builds a container image for testing purposes only.\njammy/worker                     Builds the worker image.\nmariner2/container (default)     Builds a container image for\nmariner2/container/depsonly      Builds a container image with only the runtime dependencies installed.\nmariner2/rpm                     Builds an rpm and src.rpm.\nmariner2/rpm/debug               Debug options for rpm builds.\nmariner2/worker                  Builds the base worker image responsible for building the rpm\nnoble/deb (default)              Builds a deb package.\nnoble/dsc                        Builds a Debian source package.\nnoble/testing/container          Builds a container image for testing purposes only.\nnoble/testing/sysext             Builds a systemd system extension image.\nnoble/worker                     Builds the worker image.\nrockylinux8/container (default)  Builds a container image for\nrockylinux8/container/depsonly   Builds a container image with only the runtime dependencies installed.\nrockylinux8/rpm                  Builds an rpm and src.rpm.\nrockylinux8/rpm/debug            Debug options for rpm builds.\nrockylinux8/worker               Builds the base worker image responsible for building the rpm\nrockylinux9/container (default)  Builds a container image for\nrockylinux9/container/depsonly   Builds a container image with only the runtime dependencies installed.\nrockylinux9/rpm                  Builds an rpm and src.rpm.\nrockylinux9/rpm/debug            Debug options for rpm builds.\nrockylinux9/worker               Builds the base worker image responsible for building the rpm\nwindowscross/container (default) Builds binaries and installs them into a Windows base image\nwindowscross/worker              Builds the base worker image responsible for building the package\nwindowscross/zip                 Builds binaries combined into a zip file"})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>t});var a=i(6540);const r={},s=a.createContext(r);function o(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);