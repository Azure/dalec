"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[976],{1512:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>r});var t=a(4848),s=a(8453);const i={title:"Introduction",slug:"/"},o=void 0,c={id:"intro",title:"Introduction",description:"Dalec is a tool for producing container images by first building packages",source:"@site/docs/intro.md",sourceDirName:".",slug:"/",permalink:"/dalec/",draft:!1,unlisted:!1,editUrl:"https://github.com/Azure/dalec/blob/main/website/docs/docs/intro.md",tags:[],version:"current",frontMatter:{title:"Introduction",slug:"/"},sidebar:"sidebar",next:{title:"Editor Support",permalink:"/dalec/editor-support"}},l={},r=[{value:"Spec",id:"spec",level:2},{value:"Example",id:"example",level:3},{value:"Building from source(s)",id:"building-from-sources",level:3},{value:"Targets",id:"targets",level:3},{value:"Metadata",id:"metadata",level:3},{value:"Additional Reading",id:"additional-reading",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:'Dalec is a tool for producing container images by first building packages\ntargeting the linux distribution used by the container image.\nThe final output image is a "distroless" container image with the package and all its dependencies installed.'}),"\n",(0,t.jsx)(n.p,{children:"Additionally other outputs can be produced such as source and binary packages, buildroots, and more."}),"\n",(0,t.jsx)(n.h2,{id:"spec",children:"Spec"}),"\n",(0,t.jsx)(n.p,{children:"The dalec spec is a yaml file that describes the package to be built and any\ncustomizations to the output image. It includes package metadata like name,\nversion, packager, and other things typically found in a system package. It\nalso includes a list of build and runtime dependencies, how to build the project\nto be packaged, and what files are included in the package."}),"\n",(0,t.jsx)(n.p,{children:'In addition to building a traditional package that installs binaries and other\nfiles you can also create a "virtual" package, which is a package that\nreferences other packages but doesn\'t install any files itself. This is useful\nfor creating a package that is just a collection of dependencies.'}),"\n",(0,t.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.p,{children:"In this example we'll build a virtual package that just installs other packages as dependencies."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# syntax=ghcr.io/azure/dalec/frontend:latest\nname: my-package\nversion: 1.0.0\npackager: Contoso\nvendor: Contoso\nlicense: MIT\ndescription: A virtual package that, when installed, triggers other packages to be installed\nwebsite: http://contoso.com\n\ndependencies:\n    runtime:\n        - my-package-foo\n        - my-package-bar\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can build it with:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ docker build -t my-package-image:1.0.0 --target=mariner2 -f my-package.yml .\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Note"}),": The ",(0,t.jsx)(n.code,{children:"syntax"})," line tells docker the parser to use so it can understand the dalec spec format."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)(n.em,{children:["Note: You could also pass the dalec spec file via stdin ",(0,t.jsx)(n.code,{children:"docker build -t my-package-image:1.0.0 -< my-package.yml"})]}),"\n",(0,t.jsxs)(n.em,{children:["Note: See ",(0,t.jsx)(n.a,{href:"https://docs.docker.com/engine/reference/commandline/build/",children:"docker's documentation"})," for more details on how you can pass the spec file to docker."]})]}),"\n",(0,t.jsxs)(n.p,{children:["This will produce a container image named ",(0,t.jsx)(n.code,{children:"my-package-image:1.0.0"})," that has the\n",(0,t.jsx)(n.code,{children:"my-package"}),' virtual package installed along with its runtime dependencies. The\nproduced container image is a "distroless" container image that only contains\nthe package and its dependencies. You can customize the base image to use for\nthe prooduced container. Below is an example that uses the mariner "core" image\nas the base image which includes a shell and other tools.']}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# syntax=ghcr.io/azure/dalec/frontend:latest\nname: my-package\nversion: 1.0.0\npackager: Contoso\nvendor: Contoso\nlicense: MIT\ndescription: A virtual package that, when installed, triggers other packages to be installed\nwebsite: http://contoso.com\n\ndependencies:\n    runtime:\n        - my-package-foo\n        - my-package-bar\n\ntargets:\n    mariner2:\n        image:\n            base: mcr.microsoft.com/cbl-mariner/base/core:2.0\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can also set other image settings like entrypoint/cmd, environment\nvariables, working directory, labels, and more.\nFor now, the best place to find what all is available to set is to look at the\n",(0,t.jsx)(n.a,{href:"https://github.com/Azure/dalec/blob/main/spec.go",children:"code"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# syntax=ghcr.io/azure/dalec/frontend:latest\nname: my-package\nversion: 1.0.0\npackager: Contoso\nvendor: Contoso\nlicense: MIT\ndescription: A virtual package that, when installed, triggers other packages to be installed\nwebsite: http://contoso.com\n\ndependencies:\n    runtime:\n        - my-package-foo\n        - my-package-bar\n\nimage:\n    entrypoint: /bin/sh -c\n"})}),"\n",(0,t.jsx)(n.p,{children:"Note how this is at the top level of the spec and not under a build target.\nThis means that it applies to all targets, but can also be customized per target by adding it under a target."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"targets:\n    mariner2:\n        image:\n            entrypoint: /bin/sh -c\n"})}),"\n",(0,t.jsx)(n.h3,{id:"building-from-sources",children:"Building from source(s)"}),"\n",(0,t.jsx)(n.p,{children:"Virtual packages are helpful but we need to build packages from source too.\nTo do this we'll need a few things:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"A list of sources to pull from"}),"\n",(0,t.jsx)(n.li,{children:"A build script to build the sources"}),"\n",(0,t.jsx)(n.li,{children:"A list of artifacts to include in the package"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Here we'll pull from a github repo.\nIt will use the ",(0,t.jsx)(n.code,{children:"go-md2man"})," repo and build the ",(0,t.jsx)(n.code,{children:"go-md2man"})," from the v2.0.3 tag in the repo."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Note"}),": See the full example from ",(0,t.jsx)(n.a,{href:"https://github.com/Azure/dalec/blob/main/docs/examples/go-md2man-1.yml",children:"examples/go-md2man.yml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# syntax=ghcr.io/azure/dalec/frontend:latest\nname: go-md2man\nversion: 2.0.3\npackager: Dalec Example\nvendor: Dalec Example\nlicense: MIT\ndescription: A tool to convert markdown into man pages (roff).\nwebsite: https://github.com/cpuguy83/go-md2man\n\nsources:\n  src:\n    git:\n      url: https://github.com/cpuguy83/go-md2man.git\n      commit: "v2.0.3"\n\ndependencies:\n  build:\n    golang:\n\nbuild:\n  env:\n    CGO_ENABLED: "0"\n  steps:\n    - command: |\n        export GOMODCACHE="$(pwd)/gomods"\n        cd src\n        go build -o go-md2man .\n\nartifacts:\n  binaries:\n    src/go-md2man:\n\nimage:\n  entrypoint: go-md2man\n  cmd: --help\n'})}),"\n",(0,t.jsxs)(n.p,{children:["In the ",(0,t.jsx)(n.code,{children:"sources"})," section there is a single source called ",(0,t.jsx)(n.code,{children:"src"})," that references\nthe github repo at tag v2.0.3. The name ",(0,t.jsx)(n.code,{children:"src"})," is arbitrary, however this is\nwhere the source will be checked out to in the build phase. You can add\nmultiple sources, and in the build phase they will be checked out to the name\nyou give them."]}),"\n",(0,t.jsxs)(n.p,{children:["One thing to note, in many build systems you will not have access to the\ninternet while building the package, and indeed that is the case with the\n",(0,t.jsx)(n.code,{children:"mariner2"})," target.\nAs such, this build will fail because ",(0,t.jsx)(n.code,{children:"go build"})," will try to download the go modules."]}),"\n",(0,t.jsxs)(n.p,{children:["What is actually happening with ",(0,t.jsx)(n.code,{children:"sources"}),' is the source is fetched and stored\nsuch that it can be packed up into a "source package". What a source package\nentails is dependent on the system. For rpm based systems this is an ',(0,t.jsx)(n.code,{children:"srpm"})," or\n",(0,t.jsx)(n.code,{children:".src.rpm"}),", on debian based systems this is a ",(0,t.jsx)(n.code,{children:".dsc"}),". These packages contain\neverything needed to build the package (aside from dependencies on other\npackages).  Source packages can be published to a package repository and then\nanother system can download the source package and build it."]}),"\n",(0,t.jsxs)(n.p,{children:["In the case of the above example, we need to include the go modules in the\nlist of sources.  We'll accomplish this by add a source which will run ",(0,t.jsx)(n.code,{children:"go mod download"})," in a docker image with the ",(0,t.jsx)(n.code,{children:"src"})," source mounted and then extract the\ngo modules from the resulting filesystem."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Note"}),": See the full example from ",(0,t.jsx)(n.a,{href:"https://github.com/Azure/dalec/blob/main/docs/examples/go-md2man-2.yml",children:"examples/go-md2man.yml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# syntax=ghcr.io/azure/dalec/frontend:latest\nname: go-md2man\nversion: 2.0.3\npackager: Dalec Example\nvendor: Dalec Example\nlicense: MIT\ndescription: A tool to convert markdown into man pages (roff).\nwebsite: https://github.com/cpuguy83/go-md2man\n\nsources:\n  src:\n    git:\n      url: https://github.com/cpuguy83/go-md2man.git\n      commit: "v2.0.3"\n  gomods: # This is required when the build environment does not allow network access. This downloads all the go modules.\n    path: /build/gomodcache # This is the path we will be extracing after running the command below.\n    image:\n      ref: mcr.microsoft.com/oss/go/microsoft/golang:1.21\n      cmd:\n        dir: /build/src\n        mounts:\n          # Mount a source (inline, under `spec`), so our command has access to it.\n          - dest: /build/src\n            spec:\n              git:\n                url: https://github.com/cpuguy83/go-md2man.git\n                commit: "v2.0.3"\n        steps:\n          - command: go mod download\n            env:\n              # This variable controls where the go modules are downloaded to.\n              GOMODCACHE: /build/gomodcache\n\ndependencies:\n  build:\n    golang:\n\nbuild:\n  env:\n    CGO_ENABLED: "0"\n  steps:\n    - command: |\n        export GOMODCACHE="$(pwd)/gomods"\n        cd src\n        go build -o go-md2man .\n\nartifacts:\n  binaries:\n    src/go-md2man:\n\nimage:\n  entrypoint: go-md2man\n  cmd: --help\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Finally, we can add a test case to the spec file which helps ensure the package is assembled as expected.\nThe following test will make sure ",(0,t.jsx)(n.code,{children:"/usr/bin/go-md2man"})," is installed and has the expected permissions.\nThese tests are automatically executed when building the container image.\nThis can get added to the spec file like so:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"tests:\n  - name: Check bin\n    files:\n      /usr/bin/go-md2man:\n        permissions: 0755\n"})}),"\n",(0,t.jsx)(n.h3,{id:"targets",children:"Targets"}),"\n",(0,t.jsxs)(n.p,{children:["So far we've only really built a spec file asusming a single target distro (mariner2).\nHowever many things, such as package dependencies and base images are specific to a distro or a subset of distros (e.g. Debian and Ubuntu).\nThe dalec spec allows you to move these distro specific things into a ",(0,t.jsx)(n.code,{children:"target"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Instead of specifying a package dependency at the root of the spec, you can specify it under a target.\nThis allows you to include different packages for different targets."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"targets:\n    mariner2:\n        dependencies:\n            build:\n                - golang\n\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Dalec can never hope to support every distro, so it allows you to specify a custom builder image for a target that the build will be forwarded to.\nThis lets you keep the same spec file for all targets and use one ",(0,t.jsx)(n.code,{children:"# syntax="})," directive to build the package for any target.\nIt also allows you to replace the built-in targets with your own custom builder."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"targets:\n    mariner2:\n        frontend:\n            image: docker.io/my/custom:mariner2\n"})}),"\n",(0,t.jsx)(n.h3,{id:"metadata",children:"Metadata"}),"\n",(0,t.jsx)(n.p,{children:"You can include client-side metadata in the spec file.\nThis may be useful when you want to parse the spec file and do something with your own tooling."}),"\n",(0,t.jsxs)(n.p,{children:["Any field at the top-level that begins with ",(0,t.jsx)(n.code,{children:"x-"})," will be ignored by the dalec parser.\nAny unknown fields besides those that start with ",(0,t.jsx)(n.code,{children:"x-"})," will cause the parser to fail."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'soruces:\n  src:\n    http:\n      url: https://example.com/foo.tar.gz\n\nx-my-custom-field: "foo"\n'})}),"\n",(0,t.jsx)(n.p,{children:"As an example use-case, you may want to use this to store the targeted image name for a CI/CD pipeline."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'x-image-name: "my-package-image:1.0.0"\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Your CI/CD tooling can then parse the spec file and use the ",(0,t.jsx)(n.code,{children:"x-image-name"})," field to tag the built image."]}),"\n",(0,t.jsxs)(n.p,{children:["To re-itterate: the ",(0,t.jsx)(n.code,{children:"x-"})," fields are ignored by the dalec parser and are only for client-side use."]}),"\n",(0,t.jsx)(n.h2,{id:"additional-reading",children:"Additional Reading"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Details on editor support in ",(0,t.jsx)(n.a,{href:"/dalec/editor-support",children:"editor-support.md"})]}),"\n",(0,t.jsxs)(n.li,{children:["More in-depth documentation for testing can be found in ",(0,t.jsx)(n.a,{href:"/dalec/testing",children:"testing.md"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Explanation of sources and how to use them can be found in ",(0,t.jsx)(n.a,{href:"/dalec/sources",children:"sources.md"}),"."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>c});var t=a(6540);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);