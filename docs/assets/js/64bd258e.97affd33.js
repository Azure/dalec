"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[105],{1181:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>o});var a=n(4848),t=n(8453);const s={},r="Artifacts",l={id:"artifacts",title:"Artifacts",description:"Artifacts are used to configure what actually gets installed with a package.",source:"@site/docs/artifacts.md",sourceDirName:".",slug:"/artifacts",permalink:"/dalec/artifacts",draft:!1,unlisted:!1,editUrl:"https://github.com/Azure/dalec/blob/main/website/docs/artifacts.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Testing",permalink:"/dalec/testing"},next:{title:"Extra Repository Configs",permalink:"/dalec/repositories"}},c={},o=[{value:"Artifact Configuration",id:"artifact-configuration",level:2},{value:"Binaries",id:"binaries",level:3},{value:"Libexec",id:"libexec",level:3},{value:"Manpages",id:"manpages",level:3},{value:"Data Dirs",id:"data-dirs",level:3},{value:"Directories",id:"directories",level:3},{value:"Config Files",id:"config-files",level:3},{value:"Docs",id:"docs",level:3},{value:"Licenses",id:"licenses",level:3},{value:"Systemd",id:"systemd",level:3},{value:"Libs",id:"libs",level:3},{value:"Links",id:"links",level:3},{value:"Headers",id:"headers",level:3}];function d(e){const i={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.h1,{id:"artifacts",children:"Artifacts"}),"\n",(0,a.jsx)(i.p,{children:"Artifacts are used to configure what actually gets installed with a package.\nAnything that needs to be installed needs an entry in the artifacts section."}),"\n",(0,a.jsx)(i.p,{children:"There are different types of artifacts which are installed to different locations\non the target system.\nWhat location this is depends on the target OS/distro and the kind of artifact."}),"\n",(0,a.jsx)(i.h2,{id:"artifact-configuration",children:"Artifact Configuration"}),"\n",(0,a.jsx)(i.p,{children:"Most artifact types share a common data type so can be configured similarly.\nIt is shown here as a reference which is linked to in the artifact descriptions\nwhere it is pertinent."}),"\n",(0,a.jsx)(i.p,{children:"Configuration options shared by most artifacts:"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.em,{children:"subpath"}),"(string): The provided path is joined to the typical install path,\ne.g. ",(0,a.jsx)(i.code,{children:"/usr/bin/<subpath>"}),", where the artifact will be\ninstalled to."]}),"\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.em,{children:"mode"}),"(octal): file permissions to apply to the artifact."]}),"\n"]}),"\n",(0,a.jsx)(i.h3,{id:"binaries",children:"Binaries"}),"\n",(0,a.jsxs)(i.p,{children:["Binaries are binary files that may be executed.\nOn Linux these would typically get installed into ",(0,a.jsx)(i.code,{children:"/usr/bin"}),"."]}),"\n",(0,a.jsxs)(i.p,{children:["Binaries are a mapping of file path to ",(0,a.jsx)(i.a,{href:"#artifact-configuration",children:"artifact configuration"}),".\nThe file path is the path to a file that must be available after the build\nsection has finished. This path is relative to the working directory of the\nbuild phase ",(0,a.jsx)(i.em,{children:"before"})," any directory changes are made."]}),"\n",(0,a.jsx)(i.p,{children:"Example:"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-yaml",children:'artifacts:\n  binaries:\n    src/my_bin:\n      subpath: ""\n      mode: 0o755\n'})}),"\n",(0,a.jsx)(i.p,{children:"You may use a trailing wildcard to specify multiple binaries in a directory,\nthough behavior may differ between different OS's/distros."}),"\n",(0,a.jsx)(i.h3,{id:"libexec",children:"Libexec"}),"\n",(0,a.jsxs)(i.p,{children:["Libexec files are additional executable files that may be executed by one of\nthe main package executables. On Linux these would typically get installed into\n",(0,a.jsx)(i.code,{children:"/usr/libexec/"})," or ",(0,a.jsx)(i.code,{children:"/usr/libexec/<main-executable-name>"}),"."]}),"\n",(0,a.jsxs)(i.p,{children:["Files under libexec are a mapping of file path to ",(0,a.jsx)(i.a,{href:"#artifact-configuration",children:"artifact configuration"}),".\nIf ",(0,a.jsx)(i.code,{children:"subpath"})," is not supplied, the artifact will be installed in ",(0,a.jsx)(i.code,{children:"/usr/libexec"}),"\ndirectly. The file path is the path to a file that must be available after the\nbuild section has finished. This path is relative to the working directory of\nthe build phase ",(0,a.jsx)(i.em,{children:"before"})," any directory changes are made."]}),"\n",(0,a.jsx)(i.p,{children:"Example:"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-yaml",children:"name: my_package\n\nartifacts:\n  # the following config will install my_bin at /usr/libexec/my package/my_bin\n  libexec:\n    src/my_bin:\n"})}),"\n",(0,a.jsx)(i.p,{children:"You may use a trailing wildcard to specify multiple binaries in a directory,\nthough behavior may differ between different OS's/distros."}),"\n",(0,a.jsx)(i.h3,{id:"manpages",children:"Manpages"}),"\n",(0,a.jsxs)(i.p,{children:["Manpages is short for manual pages.\nOn Linux these are typically installed to ",(0,a.jsx)(i.code,{children:"/usr/share/man"})]}),"\n",(0,a.jsxs)(i.p,{children:["Manpages are a mapping of file path to ",(0,a.jsx)(i.a,{href:"#artifact-configuration",children:"artifact configuration"}),".\nThe file path is the path to a file that must be available after the build\nsection has finished. This path is relative to the working directory of the\nbuild phase ",(0,a.jsx)(i.em,{children:"before"})," any directory changes are made."]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-yaml",children:'artifacts:\n  managpes:\n    src/man/*:\n      subpath: ""\n      mode: 0o755\n'})}),"\n",(0,a.jsx)(i.p,{children:"You may use a trailing wildcard to specify multiple binaries in a directory,\nthough behavior may differ between different OS's/distros."}),"\n",(0,a.jsx)(i.h3,{id:"data-dirs",children:"Data Dirs"}),"\n",(0,a.jsxs)(i.p,{children:["Data dirs are a list of read-only, architecture-independent data files.\nOn Linux these typically get placed into ",(0,a.jsx)(i.code,{children:"/usr/share"}),"."]}),"\n",(0,a.jsxs)(i.p,{children:["Data dirs are a mapping of file path to ",(0,a.jsx)(i.a,{href:"#artifact-configuration",children:"artifact configuration"}),".\nThe file path is the path to a file that must be available after the build\nsection has finished. This path is relative to the working directory of the\nbuild phase ",(0,a.jsx)(i.em,{children:"before"})," any directory changes are made."]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-yaml",children:'artifacts:\n  data_dirs:\n    build_output/my_bin:\n      subpath: ""\n      mode: 0o755\n'})}),"\n",(0,a.jsx)(i.h3,{id:"directories",children:"Directories"}),"\n",(0,a.jsx)(i.p,{children:"Directories allows you to create new directories when installing the package.\nTwo types of directory artifacts are supported:"}),"\n",(0,a.jsxs)(i.ol,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.em,{children:"config"}),": This is a directory where configuration files typically go, e.g. /etc/my_package2. ",(0,a.jsx)(i.em,{children:"State"}),": This is directory for persistent state, typically in ",(0,a.jsx)(i.code,{children:"/var/lib"})," on Linux."]}),"\n"]}),"\n",(0,a.jsx)(i.p,{children:"Unlike many other artifact types, this does not reference any file produced\nby build. Instead these are created as empty directories."}),"\n",(0,a.jsx)(i.p,{children:"Example:"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-yaml",children:"artifacts:\n  createDirectories:\n    state:\n      mystate:\n        mode: 0o755\n    config:\n      myconfig:\n        mode: 0o755\n"})}),"\n",(0,a.jsx)(i.h3,{id:"config-files",children:"Config Files"}),"\n",(0,a.jsxs)(i.p,{children:["Config files are, depending on the package manager, specially marked as configuration.\nTypically these go under ",(0,a.jsx)(i.code,{children:"/etc"})," on Linux."]}),"\n",(0,a.jsxs)(i.p,{children:["Config files are a mapping of file path to ",(0,a.jsx)(i.a,{href:"#artifact-configuration",children:"artifact configuration"}),".\nThe file path is the path to a file that must be available after the build\nsection has finished. This path is relative to the working directory of the\nbuild phase ",(0,a.jsx)(i.em,{children:"before"})," any directory changes are made."]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-yaml",children:'artifacts:\n  configFiles:\n    src/my_config.json:\n      subpath: ""\n      mode: 0o755\n'})}),"\n",(0,a.jsx)(i.h3,{id:"docs",children:"Docs"}),"\n",(0,a.jsxs)(i.p,{children:["Docs are general documentation, not manpages, for your package.\nOn Linux these typically go under ",(0,a.jsx)(i.code,{children:"/usr/share/doc/<package name>"})]}),"\n",(0,a.jsxs)(i.p,{children:["Docs are a mapping of file path to ",(0,a.jsx)(i.a,{href:"#artifact-configuration",children:"artifact configuration"}),".\nThe file path is the path to a file that must be available after the build\nsection has finished. This path is relative to the working directory of the\nbuild phase ",(0,a.jsx)(i.em,{children:"before"})," any directory changes are made."]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-yaml",children:'artifacts:\n  docs:\n    src/doc/info.md:\n      subpath: ""\n      mode: 0o755\n'})}),"\n",(0,a.jsx)(i.p,{children:"You may use a trailing wildcard to specify multiple binaries in a directory,\nthough behavior may differ between different OS's/distros."}),"\n",(0,a.jsx)(i.h3,{id:"licenses",children:"Licenses"}),"\n",(0,a.jsx)(i.p,{children:"Licenses are license files to be installed with the package."}),"\n",(0,a.jsxs)(i.p,{children:["Licenses are a mapping of file path to ",(0,a.jsx)(i.a,{href:"#artifact-configuration",children:"artifact configuration"}),".\nThe file path is the path to a file that must be available after the build\nsection has finished. This path is relative to the working directory of the\nbuild phase ",(0,a.jsx)(i.em,{children:"before"})," any directory changes are made."]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-yaml",children:'artifacts:\n  licenses:\n    src/LICENSE.md:\n      subpath: ""\n      mode: 0o755\n'})}),"\n",(0,a.jsx)(i.h3,{id:"systemd",children:"Systemd"}),"\n",(0,a.jsx)(i.p,{children:"Systemd artifacts are used for installing systemd unit configurations.\nTwo different types of systemd configurations are currently supported:"}),"\n",(0,a.jsxs)(i.ol,{children:["\n",(0,a.jsx)(i.li,{children:"Unit files - including services, sockets, mounts, or any other systemd unit type."}),"\n",(0,a.jsx)(i.li,{children:"Drop-ins - Adds customization to an existing systemd unit"}),"\n"]}),"\n",(0,a.jsx)(i.p,{children:"See the systemd documentation for more details on these types."}),"\n",(0,a.jsx)(i.p,{children:"Example:"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-yaml",children:'artifacts:\n  systemd:\n    units:\n      src/contrib/init/my_service.service:\n        enable: false\n        name: ""\n    dropins:\n      src/contrib/init/customize-a-thing.service:\n        enable: false\n        name: ""\n'})}),"\n",(0,a.jsx)(i.h3,{id:"libs",children:"Libs"}),"\n",(0,a.jsxs)(i.p,{children:["Libs are library files to be included with your package.\nOn Linux these typically go under ",(0,a.jsx)(i.code,{children:"/usr/lib/<package>"}),"."]}),"\n",(0,a.jsxs)(i.p,{children:["Libs are a mapping of file path to ",(0,a.jsx)(i.a,{href:"#artifact-configuration",children:"artifact configuration"}),".\nThe file path is the path to a file that must be available after the build\nsection has finished. This path is relative to the working directory of the\nbuild phase ",(0,a.jsx)(i.em,{children:"before"})," any directory changes are made."]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-yaml",children:'artifacts:\n  libs:\n    my_output_dir/lib.o:\n        subpath: ""\n        mode: 0o755\n'})}),"\n",(0,a.jsx)(i.p,{children:"You may use a trailing wildcard to specify multiple binaries in a directory,\nthough behavior may differ between different OS's/distros."}),"\n",(0,a.jsx)(i.h3,{id:"links",children:"Links"}),"\n",(0,a.jsx)(i.p,{children:"Links are a list of symlinks to be included with the package.\nUnlike most other artifact typtes, links do not reference any specific build\nartifact but rather a literal source-to-target mapping for the symlink."}),"\n",(0,a.jsx)(i.p,{children:"Example:"}),"\n",(0,a.jsx)(i.p,{children:"This creates a symlink at /usr/bin/go pointing to /usr/lib/golang/go."}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-yaml",children:"artifacts:\n  links:\n    - source: /usr/lib/golang/go\n      dest: /usr/bin/go\n"})}),"\n",(0,a.jsx)(i.h3,{id:"headers",children:"Headers"}),"\n",(0,a.jsxs)(i.p,{children:["Headers are header to be included with the package. On Linux these typically go\nunder ",(0,a.jsx)(i.code,{children:"/usr/include/"}),"."]}),"\n",(0,a.jsxs)(i.p,{children:["Headers are a mapping of file path to ",(0,a.jsx)(i.a,{href:"#artifact-configuration",children:"artifact configuration"}),".\nThe file path is the path to a file or directory that must be available after\nthe build section has finished. This path is relative to the working directory\nof the build phase ",(0,a.jsx)(i.em,{children:"before"})," any directory changes are made."]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-yaml",children:"artifacts:\n  headers:\n    src/my_header.h:\n"})}),"\n",(0,a.jsx)(i.p,{children:"or for a directory:"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-yaml",children:"artifacts:\n  headers:\n    src/my_headers/:\n"})}),"\n",(0,a.jsxs)(i.p,{children:["Note that headers are not installed within a subdirectory of ",(0,a.jsx)(i.code,{children:"/usr/include/"}),"\nwith the name of the package. They are installed directly into ",(0,a.jsx)(i.code,{children:"/usr/include/"}),".\nFor instance, for the above examples, the headers would be installed to\n",(0,a.jsx)(i.code,{children:"/usr/include/my_header.h"})," and ",(0,a.jsx)(i.code,{children:"/usr/include/my_headers/"})," respectively."]})]})}function h(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>l});var a=n(6540);const t={},s=a.createContext(t);function r(e){const i=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(s.Provider,{value:i},e.children)}}}]);