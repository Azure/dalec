"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[710],{5557:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"developers","title":"Developer Guide","description":"Welcome to the Dalec developer community! This guide will help you set up your development environment and understand the development workflow.","source":"@site/docs/developers.md","sourceDirName":".","slug":"/developers","permalink":"/dalec/developers","draft":false,"unlisted":false,"editUrl":"https://github.com/project-dalec/dalec/blob/main/website/docs/developers.md","tags":[],"version":"current","frontMatter":{"title":"Developer Guide"},"sidebar":"sidebar","previous":{"title":"Editor Support","permalink":"/dalec/editor-support"}}');var t=s(4848),l=s(8453);const r={title:"Developer Guide"},d=void 0,o={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Required Tools",id:"required-tools",level:3},{value:"Setting Up Your Development Environment",id:"setting-up-your-development-environment",level:2},{value:"Fork and Clone the Repository",id:"fork-and-clone-the-repository",level:3},{value:"Verify Your Setup",id:"verify-your-setup",level:3},{value:"Development Workflow",id:"development-workflow",level:2},{value:"1. Create a Feature Branch",id:"1-create-a-feature-branch",level:3},{value:"2. Make Your Changes",id:"2-make-your-changes",level:3},{value:"3. Development Loop",id:"3-development-loop",level:3},{value:"4. Test Your Changes",id:"4-test-your-changes",level:3},{value:"5. Test Frontend Image",id:"5-test-frontend-image",level:3},{value:"Available Make Targets",id:"available-make-targets",level:2},{value:"Testing Your Changes",id:"testing-your-changes",level:2},{value:"Understanding the Test Structure",id:"understanding-the-test-structure",level:3},{value:"Unit Tests (<code>--test.short</code>)",id:"unit-tests---testshort",level:4},{value:"Integration Tests",id:"integration-tests",level:4},{value:"Integration Tests (Run for Significant Changes)",id:"integration-tests-run-for-significant-changes",level:3},{value:"Testing Specific Components",id:"testing-specific-components",level:3},{value:"Common Development Tasks",id:"common-development-tasks",level:2},{value:"Adding a New Source Type",id:"adding-a-new-source-type",level:3},{value:"Adding a New Target",id:"adding-a-new-target",level:3},{value:"Modifying the Frontend",id:"modifying-the-frontend",level:3},{value:"Working on Documentation",id:"working-on-documentation",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Code Style",id:"code-style",level:3},{value:"Commit Messages",id:"commit-messages",level:3},{value:"Pull Requests",id:"pull-requests",level:3},{value:"Getting Help",id:"getting-help",level:2}];function a(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Welcome to the Dalec developer community! This guide will help you set up your development environment and understand the development workflow."}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsx)(n.p,{children:"Before you start, make sure you have the following installed:"}),"\n",(0,t.jsx)(n.h3,{id:"required-tools",children:"Required Tools"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Go"}),": ",(0,t.jsx)(n.a,{href:"https://go.dev/dl/",children:"Download Go"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Docker"}),": ",(0,t.jsx)(n.a,{href:"https://docs.docker.com/engine/install/",children:"Install Docker"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["It is recommended to enable ",(0,t.jsx)(n.a,{href:"https://docs.docker.com/engine/storage/containerd/",children:"Containerd Image Store"})," for local image support. It is enabled by default in new installations."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Git"}),": For version control"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Make"}),": For running development tasks (usually pre-installed on Linux/macOS)"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"setting-up-your-development-environment",children:"Setting Up Your Development Environment"}),"\n",(0,t.jsx)(n.h3,{id:"fork-and-clone-the-repository",children:"Fork and Clone the Repository"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Fork the repository on GitHub, then clone your fork\ngit clone https://github.com/<your-username>/dalec.git\ncd dalec\n\n# Add the upstream repository\ngit remote add upstream https://github.com/project-dalec/dalec.git\n"})}),"\n",(0,t.jsx)(n.h3,{id:"verify-your-setup",children:"Verify Your Setup"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Run a quick verification\nmake verify\n"})}),"\n",(0,t.jsx)(n.p,{children:"This will:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Generate required source files"}),"\n",(0,t.jsx)(n.li,{children:"Run the custom linters"}),"\n",(0,t.jsx)(n.li,{children:"Run unit tests"}),"\n",(0,t.jsx)(n.li,{children:"Validate that generated files are up to date"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"development-workflow",children:"Development Workflow"}),"\n",(0,t.jsx)(n.p,{children:"We recommend the following iterative development workflow:"}),"\n",(0,t.jsx)(n.h3,{id:"1-create-a-feature-branch",children:"1. Create a Feature Branch"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git checkout -b feature/your-feature-name\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-make-your-changes",children:"2. Make Your Changes"}),"\n",(0,t.jsx)(n.p,{children:"Edit the code using your favorite editor. Dalec is structured as follows:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cmd/"})," - CLI tools and binaries","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"frontend/"})," - Main BuildKit frontend"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"gen-jsonschema/"})," - JSON schema generator"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"lint/"})," - Custom linters"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"targets/"})," - Target-specific build implementations (Linux RPM/DEB, Windows)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"frontend/"})," - Core BuildKit frontend logic"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"test/"})," - Integration tests"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"website/docs/"})," - Documentation"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"3-development-loop",children:"3. Development Loop"}),"\n",(0,t.jsx)(n.p,{children:"While developing, use this tight feedback loop:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# 1. Generate any required code (if you modified generators)\nmake generate\n\n# 2. Run custom linters to catch issues early\nmake lint\n\n# 3. Run unit tests\nmake test\n\n# 4. Build the frontend binary to verify compilation\nmake build\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Pro Tip"}),": You can run all verification steps at once:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"make verify\n"})}),"\n",(0,t.jsx)(n.h3,{id:"4-test-your-changes",children:"4. Test Your Changes"}),"\n",(0,t.jsx)(n.p,{children:"After you're satisfied with your changes, run more comprehensive tests:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Run integration tests for a specific distribution\nmake test-integration SUITE=Azlinux3\n\n# Run all integration tests (takes 30-60+ minutes)\nmake test-integration\n"})}),"\n",(0,t.jsx)(n.h3,{id:"5-test-frontend-image",children:"5. Test Frontend Image"}),"\n",(0,t.jsx)(n.p,{children:"If you want to test the frontend with your spec files:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Build the frontend image\nmake frontend\n\n# Build and test with a specific target\n\n# Container example\ndocker build -t go-md2man:test \\\n  --build-arg BUILDKIT_SYNTAX=local/dalec/frontend \\\n  -f docs/examples/go-md2man.yml \\\n  --target=azlinux3/container \\\n  -t go-md2man:test .\n\n# RPM example\ndocker build -t go-md2man:test \\\n  --build-arg BUILDKIT_SYNTAX=local/dalec/frontend \\\n  -f docs/examples/go-md2man.yml \\\n  --target=azlinux3/rpm \\\n  --output=_output .\n"})}),"\n",(0,t.jsx)(n.h2,{id:"available-make-targets",children:"Available Make Targets"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"make help\n"})}),"\n",(0,t.jsx)(n.p,{children:"Key targets include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Development:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"make generate"})," - Generate required source files"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"make lint"})," - Run linters via docker buildx bake"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"make lint-local"})," - Run custom linters locally without Docker"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"make fmt"})," - Format Go code"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Building:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"make build"})," - Build frontend image"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"make frontend"})," - Build frontend Docker image using docker buildx bake"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"make examples"})," - Build example specs"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Testing:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"make test"})," - Run unit tests"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"make test-integration"})," - Run integration tests (use ",(0,t.jsx)(n.code,{children:"SUITE=name"})," for specific test)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"make test-bake"})," - Run tests via docker buildx bake"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Documentation:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"make docs-serve"})," - Run documentation server (requires Node.js)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"make docs-build"})," - Build documentation static site"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"make schema"})," - Generate JSON schema"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Validation:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"make verify"})," - Run all verification steps (generate, lint, test, check-generated)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"make check-generated"})," - Verify generated files are up to date"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"testing-your-changes",children:"Testing Your Changes"}),"\n",(0,t.jsx)(n.h3,{id:"understanding-the-test-structure",children:"Understanding the Test Structure"}),"\n",(0,t.jsx)(n.p,{children:"Dalec has two types of tests:"}),"\n",(0,t.jsxs)(n.h4,{id:"unit-tests---testshort",children:["Unit Tests (",(0,t.jsx)(n.code,{children:"--test.short"}),")"]}),"\n",(0,t.jsxs)(n.p,{children:["Located throughout the codebase alongside source files (e.g., ",(0,t.jsx)(n.code,{children:"spec_test.go"}),", ",(0,t.jsx)(n.code,{children:"source_test.go"}),"). These tests:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Run quickly (< 1 minute total)"}),"\n",(0,t.jsx)(n.li,{children:"Don't require Docker or network access"}),"\n",(0,t.jsx)(n.li,{children:"Test individual functions and components in isolation"}),"\n",(0,t.jsxs)(n.li,{children:["Are marked with the ",(0,t.jsx)(n.code,{children:"-test.short"})," flag"]}),"\n",(0,t.jsx)(n.li,{children:"Should always pass before committing"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Run all unit tests\ngo test --test.short ./...\n\n# Or use the Makefile\nmake test\n"})}),"\n",(0,t.jsx)(n.h4,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,t.jsxs)(n.p,{children:["Located in the ",(0,t.jsx)(n.code,{children:"test/"})," directory. These tests:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Require Docker with BuildKit support"}),"\n",(0,t.jsx)(n.li,{children:"Test full end-to-end build scenarios"}),"\n",(0,t.jsx)(n.li,{children:"Take 30-60+ minutes to complete"}),"\n",(0,t.jsx)(n.li,{children:"Test multiple Linux distributions and Windows"}),"\n",(0,t.jsx)(n.li,{children:"Build actual packages and containers"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Integration Test Framework:"})}),"\n",(0,t.jsxs)(n.p,{children:["The integration tests use a custom framework in ",(0,t.jsx)(n.code,{children:"test/testenv/"})," that:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Manages temporary Docker build contexts"}),"\n",(0,t.jsx)(n.li,{children:"Provides helpers for building specs and inspecting results"}),"\n",(0,t.jsx)(n.li,{children:"Runs tests in parallel where possible"}),"\n",(0,t.jsx)(n.li,{children:"Supports testing against different target distributions"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["Test files in ",(0,t.jsx)(n.code,{children:"test/"}),":"]})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"linux_target_test.go"})," - Tests for Linux package builds"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"target_*_test.go"})," - Distribution-specific tests (Debian, RPM, etc.)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"source_test.go"})," - Tests for source fetching and generation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"gomod_git_auth_test.go"})," - Tests for Go module authentication"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"windows_test.go"})," - Windows container build tests"]}),"\n",(0,t.jsx)(n.li,{children:"And more..."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"integration-tests-run-for-significant-changes",children:"Integration Tests (Run for Significant Changes)"}),"\n",(0,t.jsx)(n.p,{children:"Integration tests are comprehensive and time-consuming. Run them for significant changes or when modifying target-specific code:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Run all integration tests (45+ minutes)\nmake test-integration\n\n# Or test a specific distribution\nmake test-integration SUITE=Mariner2\nmake test-integration SUITE=Azlinux3\nmake test-integration SUITE=Jammy\nmake test-integration SUITE=Bookworm\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Available test suites"}),": Mariner2, Azlinux3, Bookworm, Bullseye, Bionic, Focal, Jammy, Noble, Windows, Almalinux8, Almalinux9, Rockylinux8, Rockylinux9"]}),"\n",(0,t.jsx)(n.h3,{id:"testing-specific-components",children:"Testing Specific Components"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Test a specific package\ngo test -v ./cmd/frontend\n\n# Test with a filter\ngo test -v -run TestSpecLoad ./...\n\n# Test with race detection\ngo test -race ./...\n"})}),"\n",(0,t.jsx)(n.h2,{id:"common-development-tasks",children:"Common Development Tasks"}),"\n",(0,t.jsx)(n.h3,{id:"adding-a-new-source-type",children:"Adding a New Source Type"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Add your source implementation to the appropriate file (e.g., ",(0,t.jsx)(n.code,{children:"source_*.go"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:["Run ",(0,t.jsx)(n.code,{children:"make generate"})," to update generated code"]}),"\n",(0,t.jsxs)(n.li,{children:["Run ",(0,t.jsx)(n.code,{children:"make lint"})," to check for issues"]}),"\n",(0,t.jsxs)(n.li,{children:["Add tests and run ",(0,t.jsx)(n.code,{children:"make test"})]}),"\n",(0,t.jsxs)(n.li,{children:["Update documentation in ",(0,t.jsx)(n.code,{children:"website/docs/"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"adding-a-new-target",children:"Adding a New Target"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Create a new target directory under ",(0,t.jsx)(n.code,{children:"targets/"})]}),"\n",(0,t.jsx)(n.li,{children:"Implement the target interface"}),"\n",(0,t.jsxs)(n.li,{children:["Register the target in ",(0,t.jsx)(n.code,{children:"targets/register.go"})]}),"\n",(0,t.jsxs)(n.li,{children:["Add integration tests in ",(0,t.jsx)(n.code,{children:"test/target_<name>_test.go"})]}),"\n",(0,t.jsxs)(n.li,{children:["Run ",(0,t.jsx)(n.code,{children:"make verify"})," and ",(0,t.jsx)(n.code,{children:"make test-integration SUITE=<YourTarget>"})]}),"\n",(0,t.jsx)(n.li,{children:"Update documentation"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"modifying-the-frontend",children:"Modifying the Frontend"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Make changes in ",(0,t.jsx)(n.code,{children:"cmd/frontend/"})," or ",(0,t.jsx)(n.code,{children:"frontend/"})]}),"\n",(0,t.jsxs)(n.li,{children:["Run ",(0,t.jsx)(n.code,{children:"make build"})," to compile the frontend image"]}),"\n",(0,t.jsxs)(n.li,{children:["Test with ",(0,t.jsx)(n.code,{children:"make test"})]}),"\n",(0,t.jsxs)(n.li,{children:["For Docker testing: ",(0,t.jsx)(n.code,{children:"make frontend"})]}),"\n",(0,t.jsx)(n.li,{children:"Run integration tests if modifying core logic"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"working-on-documentation",children:"Working on Documentation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Start the documentation server\nmake docs-serve\n\n# Open http://localhost:3000 in your browser\n# Edit files in website/docs/ and see live changes\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"code-style",children:"Code Style"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Follow standard Go conventions"}),"\n",(0,t.jsxs)(n.li,{children:["Run ",(0,t.jsx)(n.code,{children:"gofmt"})," (included in ",(0,t.jsx)(n.code,{children:"make lint"}),")"]}),"\n",(0,t.jsx)(n.li,{children:"Add comments for exported functions and types"}),"\n",(0,t.jsx)(n.li,{children:"Write tests for new functionality"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"commit-messages",children:"Commit Messages"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use clear, descriptive commit messages"}),"\n",(0,t.jsx)(n.li,{children:"Reference issue numbers when applicable"}),"\n",(0,t.jsxs)(n.li,{children:["Follow conventional commits format when possible:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"feat:"})," for new features"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fix:"})," for bug fixes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"docs:"})," for documentation changes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"test:"})," for test additions/changes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"refactor:"})," for code refactoring"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"pull-requests",children:"Pull Requests"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Ensure ",(0,t.jsx)(n.code,{children:"make verify"})," passes"]}),"\n",(0,t.jsx)(n.li,{children:"Add tests for new functionality"}),"\n",(0,t.jsx)(n.li,{children:"Update documentation if needed"}),"\n",(0,t.jsx)(n.li,{children:"Keep PRs focused on a single change"}),"\n",(0,t.jsx)(n.li,{children:"Respond to review feedback promptly"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"getting-help",children:"Getting Help"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Documentation"}),": ",(0,t.jsx)(n.a,{href:"https://project-dalec.github.io/dalec/",children:"https://project-dalec.github.io/dalec/"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Issues"}),": ",(0,t.jsx)(n.a,{href:"https://github.com/project-dalec/dalec/issues",children:"https://github.com/project-dalec/dalec/issues"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Discussions"}),": ",(0,t.jsx)(n.a,{href:"https://github.com/project-dalec/dalec/discussions",children:"https://github.com/project-dalec/dalec/discussions"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>d});var i=s(6540);const t={},l=i.createContext(t);function r(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);