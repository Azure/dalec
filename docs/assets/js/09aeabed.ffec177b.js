"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[770],{8977:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var t=i(4848),s=i(8453);const a={},r="Signing Packages",c={id:"signing",title:"Signing Packages",description:"Available with Dalec release v0.3.0 and later.",source:"@site/docs/signing.md",sourceDirName:".",slug:"/signing",permalink:"/dalec/signing",draft:!1,unlisted:!1,editUrl:"https://github.com/Azure/dalec/blob/main/website/docs/docs/signing.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Testing",permalink:"/dalec/testing"},next:{title:"Editor Support",permalink:"/dalec/editor-support"}},o={},l=[{value:"Build Time customization",id:"build-time-customization",level:2},{value:"Secrets",id:"secrets",level:3},{value:"Named Contexts",id:"named-contexts",level:3},{value:"Build Arguments",id:"build-arguments",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"signing-packages",children:"Signing Packages"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Available with Dalec release ",(0,t.jsx)(n.code,{children:"v0.3.0"})," and later."]})}),"\n",(0,t.jsxs)(n.p,{children:["Packages can be automatically signed using Dalec. To do this, you will\nneed to provide a signing frontend. There is an example in the test\ncode ",(0,t.jsx)(n.code,{children:"test/signer/main.go"}),". Once that signing image has been built and\ntagged, the following can be added to the spec to trigger the signing\noperation:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'name: my-package\ntargets: # Distro specific build requirements\n  mariner2:\n    package_config:\n      signer:\n        image: "ref/to/signing:image"\n        cmdline: "/signer"\n'})}),"\n",(0,t.jsx)(n.p,{children:"At this time, these targets can leverage package signing:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"windowscross/zip"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"mariner2/rpm"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"windowscross/container"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"For container targets, only the artifacts within the container get signed."}),"\n",(0,t.jsxs)(n.p,{children:["This will send the artifacts (",(0,t.jsx)(n.code,{children:".rpm"}),", ",(0,t.jsx)(n.code,{children:".deb"}),", or ",(0,t.jsx)(n.code,{children:".exe"}),") to the\nsigning frontend as the build context."]}),"\n",(0,t.jsxs)(n.p,{children:["Once a ",(0,t.jsx)(n.code,{children:"signer"})," section has been aded to the spec, signing will be automatic.\nIn order to disable signing when building specs that have a ",(0,t.jsx)(n.code,{children:"signer"})," section,\nuse the build arg ",(0,t.jsx)(n.code,{children:"DALEC_SKIP_SIGNING=1"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"The contract between dalec and the signing image is:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"The signing image will contain both the signing frontend, and any\nadditional tooling necessary to carry out the signing operation."}),"\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"llb.State"})," corresponding the artifacts to be signed will be\nprovided as the build context."]}),"\n",(0,t.jsxs)(n.li,{children:["Dalec will provide the value of ",(0,t.jsx)(n.code,{children:"dalec.target"})," to the frontend as a\n",(0,t.jsx)(n.code,{children:"FrontendOpt"}),". In the above example, this will be ",(0,t.jsx)(n.code,{children:"mariner2"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["The response from the frontend will contain an ",(0,t.jsx)(n.code,{children:"llb.State"})," that is\nidentical to the input ",(0,t.jsx)(n.code,{children:"llb.State"})," in every way ",(0,t.jsx)(n.em,{children:"except"})," that the\ndesired artifacts will be signed."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"A signer can also be configured at the root of the spec if there is no target\nspecific customization required or you are only building for one target."}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'name: my-package\npackage_config:\n  signer:\n    image: "ref/to/signing:image"\n    cmdline: "/signer"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"build-time-customization",children:"Build Time customization"}),"\n",(0,t.jsx)(n.p,{children:"Signing artifacts may require passing through build-time customizations.\nThis can be done through 3 mechanisms:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#secrets",children:"Secrets"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#named-contexts",children:"Named contexts"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#build-arguments",children:"Build arguments"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"With all methods of build-time customization, the signer needs to be coded\nsuch that it is going to consume the customizations that are passed in, as such\nall such customizations are signer specific."}),"\n",(0,t.jsx)(n.h3,{id:"secrets",children:"Secrets"}),"\n",(0,t.jsxs)(n.p,{children:["Secrets are passed through from the client (such as the docker CLI or buildx).\nThese secrets are always available to the signer.\nsee Docker's ",(0,t.jsx)(n.a,{href:"https://docs.docker.com/build/building/secrets/",children:"secrets"}),"\ndocumentation for more details on on how secrets can be passed into a build\nusing the docker CLI."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Note"}),": The docker documentation is using Dockerfiles in their examples which\nare irrelevant for Dalec signing, however the CLI examples for how to pass in\nthose secrets is useful."]}),"\n",(0,t.jsx)(n.p,{children:"No changes to the spec yaml are required to use secrets with a signer, except\nthat the signer itself needs to be setup to consume the secret(s)."}),"\n",(0,t.jsx)(n.h3,{id:"named-contexts",children:"Named Contexts"}),"\n",(0,t.jsx)(n.p,{children:"Named contexts are passed into the build by the client. All named contexts are\navailable to the signer."}),"\n",(0,t.jsxs)(n.p,{children:["A named context is just like a regular\n",(0,t.jsx)(n.a,{href:"https://docs.docker.com/build/building/context/",children:"build context"})," except that it\nis given a custom name where as the regular build context is specifically named\n",(0,t.jsx)(n.code,{children:"context"}),". In the scope of Dalec signing, the regular build context is the\npackages that Dalec is giving to the signer to sign.\nA named context can be used to provide extra data or configuration to the signer."]}),"\n",(0,t.jsx)(n.p,{children:"Example usage with Docker:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-console",children:"$ docker build --build-context my-signing-config=./signing-config-dir ...\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Here ",(0,t.jsx)(n.code,{children:"my-singing-config"})," is the name you want to give to the context which the\nsigner may use to pull in the context. The ",(0,t.jsx)(n.code,{children:"./signing-config-dir"})," is the data\nbeing given as the context, in this case a local directory. This could be a\ndirectory, a git ref, an HTTP url, etc. See the linked docker build context\ndocumentation above for more details on what can be specified."]}),"\n",(0,t.jsx)(n.p,{children:"Multiple named contexts may be provided."}),"\n",(0,t.jsx)(n.p,{children:"No changes to the spec yaml are required to use named contexts with a signer,\nexcept that the signer itself needs to be setup to consume the named\ncontext(s)."}),"\n",(0,t.jsx)(n.h3,{id:"build-arguments",children:"Build Arguments"}),"\n",(0,t.jsx)(n.p,{children:"Buid arguments are key/value pairs that can be supplied in the yaml spec which\nwill be forwarded to the signer."}),"\n",(0,t.jsxs)(n.p,{children:["Taking the original example above we can add build by adding an ",(0,t.jsx)(n.code,{children:"args"})," with\na string-to-string mapping like so:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'targets: # Distro specific build requirements\n  mariner2:\n    package_config:\n      signer:\n        image: "ref/to/signing:image"\n        cmdline: "/signer"\n        args:\n            SOME_KEY: SOME_VALUE\n            SOME_OTHER_KEY: SOME_OTHER_VALUE\n'})}),"\n",(0,t.jsx)(n.p,{children:"The values of these arguments can also be taken from the client using variable\nsubstitution like in other parts of the spec.\nTo use variable substituion, the args must be declared at the root of the spec:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'args:\n  SOME_SIGNING_ARG: ""\n  SOME_OTHER_SIGNING_ARG: "default_value"\n\ntargets: # Distro specific build requirements\n  mariner2:\n    package_config:\n      signer:\n        image: "ref/to/signing:image"\n        cmdline: "/signer"\n        args:\n            SOME_KEY: "${SOME_SIGNING_ARG}"\n            SOME_OTHER_KEY: "${SOME_OTHER_SIGNING_ARG}"\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>c});var t=i(6540);const s={},a=t.createContext(s);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);