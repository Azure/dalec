// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go bkpkg/frontend

package frontend

import spb "github.com/moby/buildkit/sourcepolicy/pb:moby_buildkit_v1_sourcepolicy"

// Spec is the specification for a package build.
#Spec: {
	// Name is the name of the package.
	Name: string

	// Description is a short description of the package.
	Description: string

	// Website is the URL to store in the metadata of the package.
	Website: string

	// Dependencies are the different dependencies that need to be specified in the package.
	Dependendencies: #PackageDependencies

	// Conflicts is the list of packages that conflict with the generated package.
	// This will prevent the package from being installed if any of these packages are already installed or vice versa.
	Conflicts: [...string] @go(,[]string)

	// Replaces is the list of packages that are replaced by the generated package.
	Replaces: [...string] @go(,[]string)

	// Provides is the list of things that the generated package provides.
	// This can be used to satisfy dependencies of other packages.
	// As an example, the moby-runc package provides "runc", other packages could depend on "runc" and be satisfied by moby-runc.
	// This is an advanced use case and consideration should be taken to ensure that the package actually provides the thing it claims to provide.
	Provides: [...string] @go(,[]string)

	// Sources is the list of sources to use to build the artifact(s).
	// The map key is the name of the source and the value is the source configuration.
	// The source configuration is used to fetch the source and filter the files to include/exclude.
	// This can be mounted into the build using the "Mounts" field in the StepGroup.
	//
	// Sources can be embedded in the main spec as here or overriden in a build request.
	Sources: {[string]: #Source} @go(,map[string]Source)

	// BuildSteps is the list of build steps to run to build the artifact(s).
	// Each entry may be run in parallel and will not share state with each other.
	BuildSteps: [...#StepGroup] @go(,[]StepGroup)

	// SourcePolicy is used to approve/deny/rewrite sources used by a build.
	SourcePolicy?: null | spb.#Policy @go(,*spb.Policy)
}

// Source defines a source to be used in the build.
// A source can be a local directory, a git repositoryt, http(s) URL, etc.
#Source: {
	// Ref is a unique identifier for the source.
	// example: "docker-image://busybox:latest", "https://github.com/moby/moby.git#master", "local://some/local/path
	Ref: string

	// Path is the path to the source after fetching it based on the identifier.
	Path: string

	// Filters is used to filter the files to include/exclude from beneath "Path".
	Filters: #Filters

	// Satisfies is the list of build dependencies that this source satisfies.
	// This needs to match the name of the dependency in the PackageDependencies.Build list.
	Satisfies: [...string] @go(,[]string)
}

// PackageDependencies is a list of dependencies for a package.
// This will be included in the package metadata so that the package manager can install the dependencies.
// It also includes build-time dedendencies, which we'll install before running any build steps.
#PackageDependencies: {
	// Build is the list of packagese required to build the package.
	Build: [...string] @go(,[]string)

	// Runtime is the list of packages required to install/run the package.
	Runtime: [...string] @go(,[]string)

	// Recommends is the list of packages recommended to install with the generated package.
	// Note: Not all package managers support this (e.g. rpm)
	Recommends: [...string] @go(,[]string)
}

// StepGroup configures a group of steps that are run sequentially along with their outputs to build the artifact(s).
#StepGroup: {
	// Steps is the list of commands to run to build the artifact(s).
	// Each step is run sequentially and will be cached accordingly.
	Steps: [...#BuildStep] @go(,[]BuildStep)

	// List of CacheDirs which will be used across all Steps
	CacheDirs: {[string]: #CacheDirConfig} @go(,map[string]CacheDirConfig)

	// Outputs is the list of artifacts to be extracted after running the steps.
	Outputs: {[string]: #ArtifactConfig} @go(,map[string]ArtifactConfig)

	// Mounts is the list of sources to mount into the build.
	// The map key is the name of the source to mount and the value is the path to mount it to.
	Mounts: {[string]: string} @go(,map[string]string)

	// Workdir specifies the working directory that each new command will run in within this step group
	WorkDir: string
}

// BuildStep is used to execute a command to build the artifact(s).
#BuildStep: {
	// Command is the command to run to build the artifact(s).
	// This will always be wrapped as /bin/sh -c "<command>", or whatever the equivalent is for the target distro.
	Command: string

	// CacheDirs is the list of CacheDirs which will be used for this build step.
	// Note that this list will be merged with the list of CacheDirs from the StepGroup.
	CacheDirs: {[string]: #CacheDirConfig} @go(,map[string]CacheDirConfig)
}

// CacheDirConfig configures a persistent cache to be used across builds.
#CacheDirConfig: {
	// Mode is the locking mode to set on the cache directory
	// values: shared, private, locked
	// default: shared
	Mode: string

	// Key is the cache key to use to cache the directory
	// default: Value of `Path`
	Key: string

	// IncludeDistroKey is used to include the distro key as part of the cache key
	// What this key is depends on the frontend implementation
	// Example for Debian Buster may be "buster"
	IncludeDistroKey: bool

	// IncludeArchKey is used to include the architecture key as part of the cache key
	// What this key is depends on the frontend implementation
	// Frontends SHOULD use the buildkit platform arch
	IncludeArchKey: bool
}

#ArtifactType: string

// ArtifactConfig is used to configure how to extract an artifact and whatit is
#ArtifactConfig: {
	// ArtifactType defines the type of artifact this is and will determine how to handle it in the package
	Type:    #ArtifactType
	Filters: #Filters
}

// Filters is used to filter the files to include/exclude from a directory.
#Filters: {
	// Includes is a list of paths underneath `Path` to include, everything else is execluded
	// If empty, everything is included (minus the excludes)
	Includes: [...string] @go(,[]string)

	// Excludes is a list of paths underneath `Path` to exclude, everything else is included
	Excludes: [...string] @go(,[]string)
}
