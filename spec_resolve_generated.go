// Code generated by cmd/gen-resolve. DO NOT EDIT.

package dalec

// Resolve creates a new Spec with target-specific configuration merged in.
// This eliminates the need to pass targetKey parameters around by pre-resolving
// all target-specific configuration into a single Spec.
func (s *Spec) Resolve(targetKey string) *Spec {
	// Create a deep copy of the current spec
	resolved := &Spec{
		Args:        s.Args,
		Build:       s.Build,
		Changelog:   s.Changelog,
		Description: s.Description,
		License:     s.License,
		Name:        s.Name,
		NoArch:      s.NoArch,
		Packager:    s.Packager,
		Patches:     s.Patches,
		Revision:    s.Revision,
		Sources:     s.Sources,
		Vendor:      s.Vendor,
		Version:     s.Version,
		Website:     s.Website,
	}

	// Copy extension fields
	if s.extensions != nil {
		resolved.extensions = make(extensionFields)
		for k, v := range s.extensions {
			resolved.extensions[k] = v
		}
	}

	// Get target-specific configuration
	target, hasTarget := s.Targets[targetKey]

	// Resolve Artifacts using existing logic
	resolved.Artifacts = s.GetArtifacts(targetKey)
	// Resolve Conflicts using existing logic
	resolved.Conflicts = s.GetConflicts(targetKey)
	// Resolve Dependencies using existing merge logic
	resolved.Dependencies = s.GetPackageDeps(targetKey)
	// Resolve Image using existing merge logic
	resolved.Image = MergeSpecImage(s, targetKey)
	// Resolve PackageConfig (target overrides global)
	resolved.PackageConfig = s.PackageConfig
	if hasTarget && target.PackageConfig != nil {
		resolved.PackageConfig = target.PackageConfig
	}
	// Resolve Provides using existing logic
	resolved.Provides = s.GetProvides(targetKey)
	// Resolve Replaces using existing logic
	resolved.Replaces = s.GetReplaces(targetKey)
	// Merge Tests (global + target-specific)
	resolved.Tests = append([]*TestSpec(nil), s.Tests...)
	if hasTarget && target.Tests != nil {
		resolved.Tests = append(resolved.Tests, target.Tests...)
	}
	// Clear targets as this is now a resolved spec for a specific target
	resolved.Targets = nil

	return resolved
}
