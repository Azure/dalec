package deb

import (
	"bytes"
	"fmt"
	"io"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/Azure/dalec"
	"github.com/moby/buildkit/client/llb"
)

func Rules(spec *dalec.Spec, in llb.State, dir string) (llb.State, error) {
	buf := bytes.NewBuffer(nil)

	if dir == "" {
		dir = "debian"
	}

	if err := WriteRules(spec, buf); err != nil {
		return llb.Scratch(), err
	}

	return in.
			File(llb.Mkdir(dir, 0o755, llb.WithParents(true))).
			File(llb.Mkfile(filepath.Join(dir, "rules"), 0o770, buf.Bytes())),
		nil
}

func WriteRules(spec *dalec.Spec, w io.Writer) error {
	return rulesTmpl.Execute(w, &rulesWrapper{spec})
}

type rulesWrapper struct {
	*dalec.Spec
}

func (w *rulesWrapper) Envs() fmt.Stringer {
	b := &strings.Builder{}

	for k, v := range w.Spec.Build.Env {
		fmt.Fprintf(b, "export %s := %s\n", k, v)
	}

	return b
}

var rulesTmpl = template.Must(template.New("rules").Parse(strings.TrimSpace(`
#!/usr/bin/make -f

{{ .Envs }}

override_dh_auto_clean:
	@# Stop debhelper from doing "make clean"

override_dh_auto_install:
	@# Stop debhelper from doing "make install"
	@# Dalec will generate the right install commands

# The below _build script is a file generated by Dalec and included in the debroot
override_dh_auto_build:
	./_build

%:
	dh $@

`)))
