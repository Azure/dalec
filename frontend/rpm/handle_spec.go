package rpm

import (
	"bytes"
	"context"
	"fmt"
	"path/filepath"
	"runtime/debug"

	"github.com/Azure/dalec"
	"github.com/Azure/dalec/frontend"
	"github.com/moby/buildkit/client/llb"
	gwclient "github.com/moby/buildkit/frontend/gateway/client"
	ocispecs "github.com/opencontainers/image-spec/specs-go/v1"
)

func SpecHandler(ctx context.Context, client gwclient.Client, spec *dalec.Spec, targetKey string) (*gwclient.Result, error) {
	st, err := Dalec2SpecLLB(spec, llb.Scratch(), targetKey, "")
	if err != nil {
		return nil, err
	}

	def, err := st.Marshal(ctx)
	if err != nil {
		return nil, fmt.Errorf("error marshalling llb: %w", err)
	}

	return client.Solve(ctx, gwclient.SolveRequest{
		Definition: def.ToPB(),
	})
}

func HandleSpec() gwclient.BuildFunc {
	return func(ctx context.Context, client gwclient.Client) (*gwclient.Result, error) {
		return frontend.BuildWithPlatform(ctx, client, func(ctx context.Context, client gwclient.Client, platform *ocispecs.Platform, spec *dalec.Spec, targetKey string) (gwclient.Reference, *dalec.DockerImageSpec, error) {
			res, err := SpecHandler(ctx, client, spec, targetKey)
			if err != nil {
				return nil, nil, err
			}
			ref, err := res.SingleRef()
			return ref, nil, err
		})
	}

}

func Dalec2SpecLLB(spec *dalec.Spec, in llb.State, targetKey, dir string, opts ...llb.ConstraintsOpt) (llb.State, error) {
	if err := ValidateSpec(spec); err != nil {
		return llb.Scratch(), fmt.Errorf("invalid spec: %w", err)
	}
	opts = append(opts, dalec.ProgressGroup("Generate RPM spec"))
	buf := bytes.NewBuffer(nil)
	info, _ := debug.ReadBuildInfo()
	buf.WriteString("# Automatically generated by " + info.Main.Path + "\n")
	buf.WriteString("\n")

	if err := WriteSpec(spec, targetKey, buf); err != nil {
		return llb.Scratch(), err
	}

	if dir == "" {
		dir = "SPECS/" + spec.Name
	}

	return in.
			File(llb.Mkdir(dir, 0755, llb.WithParents(true)), opts...).
			File(llb.Mkfile(filepath.Join(dir, spec.Name)+".spec", 0640, buf.Bytes()), opts...),
		nil
}
